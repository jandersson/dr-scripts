=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#safe-room
=end

custom_require.call(%w[common common-healing common-money common-travel drinfomon events])

class SafeRoom
  include DRC
  include DRCH
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'force', regex: /force/i, optional: true, description: 'Run healing logic even if there are no visible wounds' }
      ]
    ]

    args = parse_args(arg_definitions)
    settings = get_settings
    @health_threshold = settings.saferoom_health_threshold

    return unless args.force || need_healing?

    if use_pc_empath?(settings.safe_room_id, settings.safe_room_empath)
      ensure_copper_on_hand(settings.safe_room_tip_threshold || 0, settings.hometown)
      tip(settings.safe_room_tip_threshold, settings.safe_room_tip_amount, settings.safe_room_empath)
    elsif DRStats.empath?
      walk_to(settings.safe_room)
      wait_for_script_to_complete('healme')
    elsif !DRStats.necromancer?
      ensure_copper_on_hand(4_000, settings.hometown)
      Flags.add('npc-idle', '^Dokt glances around the room')
      Flags.add('healthy', 'Dokt waves a large hand at you', 'Dokt gives you a quick glance', 'go have yourself a birthday party', 'you are well', 'have other patients', 'you look fine and healthy', 'A little rest and exercise', 'There is nothing I can do for you', 'Up and out')
      Flags.add('moved', 'grabs you and drags you')
      Flags.add('idle', 'you have been idle too long')

      town_data = get_data('town')
      hometown = town_data[settings.hometown]
      wait_at_empath(hometown['npc_empath']['id'])
      fix_standing
    end

    give_and_take(settings.safe_room_id, settings.safe_room_give, settings.safe_room_take)
  end

  def need_healing?
    if bleeding? || checkpoison
      echo "***STATUS*** Bleeding: #{bleeding?}, poison: #{checkpoison}"
      return true
    end

    health_hash = check_health
    unless health_hash.any?
      echo '***STATUS*** No wounds, skipping healing'
      return false
    end

    score = health_hash.map { |k, v| (k**2) * v.count }.reduce(:+)
    echo "***STATUS*** Current health score is #{score}, threshold is #{@health_threshold}"

    score > @health_threshold
  end

  def check_idle
    return unless Flags['idle']

    Flags.reset('idle')
    fput('tdp')
  end

  def wait_for_healing
    Flags.reset('healthy')
    Flags.reset('moved')

    lie_down
    start_script('tendme')

    until Flags['healthy'] || Flags['moved']
      lie_down
      pause 1
      check_idle
    end
    wait_for_healing if Flags['moved']
    stop_script('tendme') if Script.running?('tendme')
  end

  def wait_at_empath(room_id)
    walk_to room_id
    unless Room.current.id == room_id
      beep
      beep
      echo 'ERROR Navigating to safe room'
      return
    end

    release_invisibility

    if DRRoom.pcs.empty? || DRRoom.pcs_prone.empty?
      wait_for_healing
      return
    end

    people_in_front = DRRoom.pcs - DRRoom.pcs_sitting
    echo "people_in_front: #{people_in_front}" if UserVars.safe_room_debug

    while bleeding?
      lie_down
      pause 10
    end

    fix_standing

    counter = 0
    while counter < 10
      pause 1
      if DRRoom.pcs_prone.empty? || (DRRoom.pcs_prone & people_in_front).empty?
        counter += 1
      else
        counter = 0
      end
      check_idle
      if Flags['npc-idle'] && DRRoom.pcs_prone
        people_in_front -= DRRoom.pcs_prone
        Flags.reset('npc-idle')
      end
      break if ((DRRoom.pcs - DRRoom.pcs_sitting) & people_in_front).empty?
    end

    wait_for_healing
  end

  def lie_down
    bput('lie', 'You lie') if standing?
  end

  def use_pc_empath?(room_id, empath)
    return false unless room_id
    return false unless empath

    walk_to room_id
    return false unless DRRoom.pcs.include?(empath)

    # fput("whisper #{empath} heal")
    fput("listen to #{empath}")
    Flags.add('doneheal', '"Done!"')
    24.times do
      pause 5
      break if Flags['doneheal']
    end
    Flags.delete('doneheal')

    !need_healing?
  end

  def give_and_take(room_id, give_items, take_items)
    return unless room_id
    return unless give_items || take_items

    walk_to room_id
    give(give_items)
    take(take_items)
  end

  def tip(tip_threshold, tip_amount, empath)
    return unless tip_threshold
    return unless wealth > tip_threshold
    return unless tip_amount
    return unless empath

    minimize_coins(tip_amount).each do |amount|
      fput "give #{empath} #{amount}"
    end
  end

  def give(items)
    items.each do |item|
      loop do
        case bput("get my #{item}", 'You get', 'What were you referring')
        when 'You get'
          fput "drop #{item}"
        else
          break
        end
      end
    end
  end

  def take(items)
    items.each do |item|
      break unless stow?(item)
    end
  end

  def stow?(item)
    DRRoom.room_objs.grep(/#{item}/).each do |_|
      fput "stow #{item}"
      pause 1
      next unless [right_hand, left_hand].grep(/#{item}/i)
      fput "drop #{item}"
      pause 1
      return false
    end

    true
  end
end

SafeRoom.new
