# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#spellmonitor
=end

unless XMLData.game =~ /^(?:DRF|DR|DRT||DRPlat|DRX)$/
  echo "This script is meant for DragonRealms Prime, Platinum, or Fallen.  It will likely cause problems on whatever game you're trying to run it on..."
  exit
end

no_kill_all
no_pause_all
# hide_me
setpriority(0)

$CYCLICAL = 1001

class DRSpells
  @@active_spells = {}
  @@refresh_data = {}
  @@slivers = false

  def self.active_spells
    @@active_spells
  end

  def self.refresh_data
    @@refresh_data
  end

  def self.slivers
    @@slivers
  end

  def self.slivers=(val)
    @@slivers = val
  end
end

spell_action = proc do |server_string|
  if server_string =~ %r{<clearStream id="percWindow"/>}
    DRSpells.slivers = false
    DRSpells.refresh_data.each_key { |k| DRSpells.refresh_data[k] = false }
    begin
      Thread.new do
        sleep 0.5
        DRSpells.refresh_data.each do |key, state|
          unless state
            DRSpells.active_spells.delete(key)
            DRSpells.refresh_data.delete(key)
          end
        end
      end
    rescue => e
      echo(e)
      echo('Error in spell monitor')
    end
  elsif server_string =~ %r{pushStream id="percWindow"/>\s([^<>]+)\s\s\((\d+) roisaen\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>\s([^<>]+)\s\s\((\d+) roisan\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>\s([^<>]+)\s\s\(Fading\)}
    DRSpells.active_spells[Regexp.last_match(1)] = 0
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>  \((\d+) roisaen\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>  \((\d+) roisan\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>  \(Indefinite\)}
    DRSpells.active_spells[Regexp.last_match(1)] = $CYCLICAL # is there a better solution?
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>  \(OM\)}
    DRSpells.active_spells[Regexp.last_match(1)] = 1000 # is there a better solution?
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{<pushStream id="percWindow"/>.*orbiting sliver.*}
    DRSpells.slivers = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>\s*$}
    DRSpells.active_spells[Regexp.last_match(1)] = 1000 # is there a better solution?
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>\s+\((\d+)%\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{pushStream id="percWindow"/>(.+)<popStream/><pushStream id="percWindow"/>  \(Fading\)}
    DRSpells.active_spells[Regexp.last_match(1)] = 0
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{<pushStream id="percWindow"/> (.*) \((\d+) roisaen\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  elsif server_string =~ %r{<popStream/><pushStream id="percWindow"/> (.+) \((\d+) roisaen\)}
    DRSpells.active_spells[Regexp.last_match(1)] = Regexp.last_match(2).to_i
    DRSpells.refresh_data[Regexp.last_match(1)] = true
  end

  server_string
end

DownstreamHook.remove('spell_action')
DownstreamHook.add('spell_action', spell_action)

before_dying do
  DownstreamHook.remove('spell_action')
end

until script.gets.nil?
end
