
custom_require.call(%w[drinfomon equipmanager common common-crafting common-items common-travel])

class Clerk
  include DRC
  include DRCC
  include DRCI
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'toolset', options: %w[forging outfitting engineering], description: 'What set of tools to use' },
        { name: 'action', options: %w[get store], description: 'Whether to get tools, or store them with the clerk' }
      ]
    ]
    args = parse_args(arg_definitions)
    action = args.action

    settings = get_settings
    hometown = settings.hometown
    @bag = settings.crafting_container

    crafting_data = get_data('crafting')

    if args.toolset == 'engineering'
      tools = settings.shaping_tools
      area = 'shaping'
      @belt = settings.engineering_belt
    end

    if args.toolset == 'outfitting'
      tools = settings.outfitting_tools
      area = 'tailoring'
      @belt = settings.outfitting_belt
    end

    if args.toolset == 'forging'
      tools = settings.forging_tools
      area = 'blacksmithing'
      @belt = settings.forging_belt
    end

    if args.toolset == 'alchemy'
      tools = settings.alchemy_tools
      area = 'remedies'
      @belt = settings.alchemy_belt
    end

    roomnumber = crafting_data[area][hometown]['repair-room']
    repairnpc = crafting_data[area][hometown]['repair-npc']

    if action == 'store'
      storeTools(tools, roomnumber)
    elsif action = 'get'
      getTools(tools, roomnumber, repairnpc)
    else
      echo 'Unknown action'
    end
  end

  def getTools(tools, roomnumber, repairnpc)
    DRCT.walk_to(roomnumber)
    tools.each do |tool|
      case bput("ask #{repairnpc} for #{tool}", 'Ah, yes, we have one of your tools like that', 'Ah, yes, we have several of your tools like that', "It doesn't look like we have anything like that")
      when 'Ah, yes, we have one of your tools like that'
        stow_crafting_item(tool, @bag, @belt)
      when 'Ah, yes, we have several of your tools like that'
        # #Sack
      end
    end
  end

  def storeTools(tools, roomnumber)
    echo roomnumber
    DRCT.walk_to(roomnumber)
    tools.each do |tool|
      get_crafting_item(tool, @bag, @belt, @belt)
      case bput("put #{tool} on counter", 'Feel free to come back for your item any time', "You don't have enough space in your storage")
      when "You don't have enough space in your storage"
        stow_crafting_item(tool, @bag, @belt)
      end
    end
  end

  def stowTool(tool); end

  def retreiveTool(tool); end
end

Clerk.new
