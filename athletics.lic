=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#athletics
=end

custom_require.call(%w[common common-items common-travel events drinfomon])

class Statistics
  def initialize
    @start_time = Time.now
    @start_exp = DRSkill.getxp('Athletics')
    UserVars.rope_tracker ||= {}
  end

  def report
    exp_delta = DRSkill.getxp('Athletics') - @start_exp.to_f
    time_delta = (Time.now - @start_time).to_f
    @learning_rate = (exp_delta / time_delta).round(4)
    echo "Training took: #{time_delta.round(2)} seconds"
    echo "Mindstates gained: #{exp_delta.round(2)}"
    echo "Learning rate is: #{@learning_rate} mindstates per second"
    echo "Using song: #{UserVars.climbing_song}"
    save if exp_delta > 0
  end

  def save
    UserVars.rope_tracker[UserVars.climbing_song] = @learning_rate
  end
end

class Athletics
  include DRC
  include DRCT
  include DRCI

  def initialize
    @settings = get_settings
    @athletics_options = get_data('athletics').athletics_options

    @climbing_target = get_data('athletics').practice_options[@settings.climbing_target]
    @swimming_target = get_data('athletics').swimming_options[@settings.swimming_target]
    have_climbing_rope = get_settings.have_climbing_rope

    start_exp = DRSkill.getxp('Athletics')
    @end_exp = [start_exp + 15, 29].min

    if have_climbing_rope
      stats = Statistics.new if UserVars.athletics_debug
      train_with_rope
      stats.report if UserVars.athletics_debug
    elsif @swimming_target
      swim_loop(@swimming_target['rooms'])
    elsif @climbing_target
      climb_practice(@climbing_target['id'], @climbing_target['target'], @climbing_target['hide'])
    elsif @settings.hometown == 'Crossing'
      crossing_athletics
    elsif @settings.hometown == 'Riverhaven'
      crossing_athletics if DRSkill.getrank('Athletics') > 140
    elsif @settings.hometown == 'Shard'
      shard_athletics
    elsif @settings.hometown == 'Hibarnhvidar'
      hib_athletics
    elsif @settings.hometown == 'Ratha'
      ratha_athletics
    end
  end

  def swim_loop(rooms)
    return unless rooms

    rooms.each { |x| walk_to(x) } until done_training?
  end

  def done_training?
    DRSkill.getxp('Athletics') >= @end_exp
  end

  def stop_play
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
  end

  def clean_zills
    cloth = @settings.cleaning_cloth
    stow_hands
    bput('remove my zills', 'You slide')
    bput("get my #{cloth}", 'You get')

    loop do
      case bput("wipe my zills with my #{cloth}", 'Roundtime', 'not in need of drying', 'You should be sitting up')
      when 'not in need of drying'
        break
      when 'You should be sitting up'
        fix_standing
        next
      end
      pause 1
      waitrt?

      until /you wring a dry/i =~ bput("wring my #{cloth}", 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /not in need of cleaning/i =~ bput("clean my zills with my #{cloth}", 'Roundtime', 'not in need of cleaning')
      pause 1
      waitrt?
    end

    bput('wear my zills', 'You slide')
    bput("stow my #{cloth}", 'You put')
  end

  def play_climbing_song?
    UserVars.climbing_song = @song_list.first.first unless UserVars.climbing_song
    case bput("play #{UserVars.climbing_song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument', 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play')
    when 'Play on what instrument'
      return false
    when 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play'
      return false
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
      return false
    when 'dirtiness may affect your performance'
      if DRSkill.getrank('Performance') < 20
        echo "Skipping cleaning of zills due to low rank of Performance: #{DRSkill.getrank('Performance')}" if UserVars.athletics_debug
        return true
      end
      stop_play
      clean_zills
      return play_climbing_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      # Ignore difficulty messages if we have an offset
      if UserVars.climbing_song_offset
        return true
      else
        stop_play
        UserVars.climbing_song = @song_list[UserVars.climbing_song] || @song_list.first.first
        return play_climbing_song?
      end
    when 'You struggle to begin'
      # Ignore difficulty message if we have an offset
      if UserVars.climbing_song_offset
        return true
      else
        if UserVars.climbing_song != @song_list.first.first
          stop_play
          UserVars.climbing_song = @song_list.first.first
          return play_climbing_song?
        end
      end
    end

    true
  end

  def offset_climbing_song(direction)
    return unless UserVars.climbing_song_offset
    return unless @song_list

    if direction.eql?(1)
      UserVars.climbing_song = @song_list[UserVars.climbing_song]
    elsif direction.eql?(-1)
      UserVars.climbing_song = @song_list.key(UserVars.climbing_song)
    else
      echo 'Invalid offset direction'
    end
  end

  def train_with_rope
    return unless exists?('climbing rope')
    return unless exists?('zills')

    UserVars.climbing_song ||= UserVars.song
    echo "UserVars.climbing_song: #{UserVars.climbing_song}" if UserVars.athletics_debug

    @song_list = get_data('perform').perform_options
    echo "@song_list: #{@song_list}" if UserVars.athletics_debug

    Flags.add('climbing-finished', 'You finish practicing your climbing', 'The rope\'s will quickly fades away', 'Your focus diverts away from the rope')
    Flags.add('climbing-too-hard', 'This climb is too difficult')
    Flags.add('climbing-too-easy', 'This climb is no challenge at all, so you stop practicing')

    stow_hands
    walk_to @settings.safe_room
    bput('get climbing rope', 'You are already holding that', 'You get', 'What were you')
    until done_training?
      fix_standing
      Flags.reset('climbing-finished')
      break unless play_climbing_song?
      case bput('climb practice climbing rope', 'You begin to practice ', 'you mime a convincing climb while pulling the rope hand over hand', 'Directing your attention toward your rope', 'Allows you to climb various things like a tree', 'But you aren\'t holding', 'You should stop practicing')
      when /you mime/
        break unless play_climbing_song?
      when /Directing your/, /You should stop practicing/
        loop do
          pause 1
          break if Flags['climbing-finished']
          if Flags['climbing-too-hard']
            Flags.reset('climbing-too-hard')
            UserVars.climbing_song_offset = true
            stop_play
            offset_climbing_song(-1)
            break
          elsif Flags['climbing-too-easy']
            Flags.reset('climbing-too-easy')
            UserVars.climbing_song_offset = true
            stop_play
            offset_climbing_song(1)
            break
          end
        end
      when /Allows you to climb various things like a tree/
        echo 'Waiting for rope to become climbable again'
        pause 20
      when /But you aren't holding/
        bput('get climbing rope', 'You are already holding that', 'You get', 'What were you')
      end
    end
    Flags.delete('climbing-finished')
    Flags.delete('climbing-too-easy')
    Flags.delete('climbing-too-hard')
    bput('stop climb', 'You stop practicing your climbing skills.', "You weren't practicing your climbing skills anyway.")
    fix_standing
    stow_hands
  end

  def stop_play
    bput('stop play', 'You stop playing your song', 'In the name of', "But you're not performing")
  end

  def clean_zills
    cloth = @settings.cleaning_cloth
    stow_hands
    bput('remove my zills', 'You slide')
    bput("get my #{cloth}", 'You get')

    loop do
      case bput("wipe my zills with my #{cloth}", 'Roundtime', 'not in need of drying', 'You should be sitting up')
      when 'not in need of drying'
        break
      when 'You should be sitting up'
        fix_standing
        next
      end
      pause 1
      waitrt?

      until /you wring a dry/i =~ bput("wring my #{cloth}", 'You wring a dry', 'You wring out')
        pause 1
        waitrt?
      end
    end

    until /not in need of cleaning/i =~ bput("clean my zills with my #{cloth}", 'Roundtime', 'not in need of cleaning')
      pause 1
      waitrt?
    end

    bput('wear my zills', 'You slide')
    bput("stow my #{cloth}", 'You put')
  end

  def play_climbing_song?
    UserVars.climbing_song = @song_list.first.first unless UserVars.climbing_song
    case bput("play #{UserVars.climbing_song}", 'dirtiness may affect your performance', 'slightest hint of difficulty', 'You begin a', 'You struggle to begin', 'You\'re already playing a song', 'You effortlessly begin', 'You begin some', 'You cannot play', 'Play on what instrument', 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play')
    when 'Play on what instrument'
      return false
    when 'now isn\'t the best time to be playing', 'Perhaps you should find somewhere drier before trying to play'
      return false
    when 'You cannot play'
      wait_for_script_to_complete('safe-room')
      return false
    when 'dirtiness may affect your performance'
      if DRSkill.getrank('Performance') < 20
        echo "Skipping cleaning of zills due to low rank of Performance: #{DRSkill.getrank('Performance')}" if UserVars.athletics_debug
        return true
      end
      stop_play
      clean_zills
      return play_climbing_song?
    when 'You begin a', 'You effortlessly begin', 'You begin some'
      # Ignore difficulty messages if we have an offset
      return true if UserVars.climbing_song_offset

      stop_play
      UserVars.climbing_song = @song_list[UserVars.climbing_song] || @song_list.first.first
      return play_climbing_song?
    when 'You struggle to begin'
      # Ignore difficulty message if we have an offset
      return true if UserVars.climbing_song_offset
      return true if UserVars.climbing_song == @song_list.first.first

      stop_play
      UserVars.climbing_song = @song_list.first.first
      return play_climbing_song?
    end

    true
  end

  def offset_climbing_song(direction)
    return unless UserVars.climbing_song_offset
    return unless @song_list

    if direction.eql?(1)
      UserVars.climbing_song = @song_list[UserVars.climbing_song]
    elsif direction.eql?(-1)
      UserVars.climbing_song = @song_list.key(UserVars.climbing_song)
    else
      echo 'Invalid offset direction'
    end
  end

  def train_with_rope
    return unless exists?('climbing rope')
    return unless exists?('zills')

    UserVars.climbing_song ||= UserVars.song
    echo "UserVars.climbing_song: #{UserVars.climbing_song}" if UserVars.athletics_debug

    @song_list = get_data('perform').perform_options
    echo "@song_list: #{@song_list}" if UserVars.athletics_debug

    Flags.add('climbing-finished', 'You finish practicing your climbing', 'The rope\'s will quickly fades away', 'Your focus diverts away from the rope')
    Flags.add('climbing-too-hard', 'This climb is too difficult')
    Flags.add('climbing-too-easy', 'This climb is no challenge at all, so you stop practicing')

    stow_hands
    walk_to @settings.safe_room
    bput('get climbing rope', 'You are already holding that', 'You get', 'What were you')
    until done_training?
      fix_standing
      Flags.reset('climbing-finished')
      break unless play_climbing_song?
      case bput('climb practice climbing rope', 'You begin to practice ', 'you mime a convincing climb while pulling the rope hand over hand', 'Directing your attention toward your rope', 'Allows you to climb various things like a tree', 'But you aren\'t holding', 'You should stop practicing')
      when /you mime/
        break unless play_climbing_song?
      when /Directing your/, /You should stop practicing/
        loop do
          pause 1
          break if Flags['climbing-finished']
          if Flags['climbing-too-hard']
            Flags.reset('climbing-too-hard')
            UserVars.climbing_song_offset = true
            stop_play
            offset_climbing_song(-1)
            break
          elsif Flags['climbing-too-easy']
            Flags.reset('climbing-too-easy')
            UserVars.climbing_song_offset = true
            stop_play
            offset_climbing_song(1)
            break
          end
        end
      when /Allows you to climb various things like a tree/
        echo 'Waiting for rope to become climbable again'
        pause 20
      when /But you aren't holding/
        bput('get climbing rope', 'You are already holding that', 'You get', 'What were you')
      end
    end
    Flags.delete('climbing-finished')
    Flags.delete('climbing-too-easy')
    Flags.delete('climbing-too-hard')
    bput('stop climb', 'You stop practicing your climbing skills.', "You weren't practicing your climbing skills anyway.")
    fix_standing
    stow_hands
  end

  def crossing_athletics
    if DRSkill.getrank('Athletics') >= 400
      climb_branch
    else
      until done_training?
        @athletics_options
          .reject { |data| @settings.avoid_athletics_in_justice && data['justice'] }
          .each do |data|
          break unless climb?(data['room'], data['targets'])
        end
      end
    end
  end

  def shard_athletics
    until done_training?
      if DRSkill.getrank('Athletics') > 20 && DRSkill.getrank('Athletics') <= 250
        swim_zaldeni
      elsif DRSkill.getrank('Athletics') < 540
        if DRSkill.getrank('Stealth') >= 250
          # Shard side of undergondola.  Need to hide to practice there
          climb_practice(19_460, 'wall', true)
        else
          swim_liirewsag
        end
      else
        climb_branch
      end
    end
  end

  def hib_athletics
    swim_liirewsag
  end

  def ratha_athletics
    until done_training?
      if DRSkill.getrank('Athletics') <= 185
        climb_practice(5287, 'rock gorge', true)
      elsif DRSkill.getrank('Stealth') >= 130
        climb_practice(5143, 'deep crack', true)
      end
    end
  end

  def swim_zaldeni
    until done_training?
      walk_to(11_481)
      walk_to(11_482)
      walk_to(11_483)
    end
  end

  def swim_liirewsag
    # Intermittent errors in the map will cause go2 to get stuck.  The manual moves are a workaround for that
    walk_to(4155)
    move('nw')
    until done_training?
      move('climb bank')
      3.times do
        move('south')
        waitrt?
      end
      walk_to(4155)
      move('nw')
    end
    move('climb bank')
    waitrt?
  end

  def climb_practice(room, target, to_hide = false)
    return unless target
    walk_to(room)
    until done_training?
      retreat
      if to_hide
        remaining_attempts = 5
        while remaining_attempts > 0
          break if hide?
          remaining_attempts -= 1
        end
        return if remaining_attempts.zero?
      end
      Flags.add('ct-climbing-finished', 'You finish practicing your climbing')
      Flags.add('ct-climbing-combat', 'You are engaged in combat')
      bput("climb practice #{target}", 'You begin to practice ')
      loop do
        pause
        break if Flags['ct-climbing-finished']
        return if Flags['ct-climbing-combat']
        break if done_training?
      end
      bput('stop climb', 'You stop practicing your climbing skills.', "You weren't practicing your climbing skills anyway.")
    end

    bput('unhide', 'You come out of hiding', 'You slip out of hiding', 'But you are not') if to_hide
  end

  def climb?(room, targets)
    targets.each do |target|
      walk_to(room)
      return true if DRRoom.npcs.length >= 3

      bput("climb #{target}", '.*')
      pause
      waitrt?
      return false if done_training?
    end
    true
  end

  def climb_branch
    start_script('skill-recorder') unless Script.running?('skill-recorder')
    if UserVars.athletics < 540
      climb_practice(2245, 'branch', true)
    else
      walk_to(9607)
      walk_to(19_464)
      until done_training?
        walk_to(2245)
        walk_to(9607)
        walk_to(11_126)
        walk_to(19_464)
        break if done_training?
        train_outdoorsmanship
        train_outdoorsmanship
        train_outdoorsmanship
        train_outdoorsmanship
      end
    end
  end

  def train_outdoorsmanship
    collect(@settings.forage_item)
    waitrt?
    kick_pile?
  end
end

Athletics.new
