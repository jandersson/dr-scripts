=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#outdoorsmanship
=end

custom_require.call(%w[common common-items drinfomon common-arcana events])

class Outdoorsmanship
  include DRC
  include DRCI
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'mindstates', regex: /\d+/, optional: true, description: 'Number of mindstates or collection attempts to perform before exiting. Defaults to 3' },
        { name: 'collect_item', regex: /\w+/i, optional: true, description: 'Item to collect. Will use forage_item if not set' }
      ]
    ]
    args = parse_args(arg_definitions)

    @settings = get_settings

    @training_spells = @settings.crafting_training_spells
    @targetxp = 4
    @targetxp = args.mindstates.to_i if args.mindstates

    @forage_item = if args.collect_item
                     args.collect_item
                   else
                     @settings.forage_item
                   end

    start_exp = DRSkill.getxp('Outdoorsmanship')
    @end_exp = [start_exp + @targetxp, 29].min
    Flags.add('outdoors-magic-ready', 'You feel fully prepared to cast your spell.')

    train_outdoorsmanship
  end

  def train_outdoorsmanship
    attempt = 0 # Failsafe counter to prevent an infinite loop if item isn't collectable in the room
    while (DRSkill.getxp('Outdoorsmanship') < @end_exp) && (attempt < @targetxp)
      if DRSkill.getrank('Outdoorsmanship') < 20
        magic_routine
        forage?('rock')
        dispose_trash 'rock'
      else
        item = @forage_item
        magic_routine
        collect(item)
        waitrt?
        kick_pile? unless kick_pile?("#{item}s")
      end
      attempt += 1
    end
    magic_cleanup
  end

  def magic_routine
    return if @training_spells.empty?

    needs_training = %w[Warding Utility Augmentation]
                     .select { |skill| @training_spells[skill] }
                     .select { |skill| DRSkill.getxp(skill) < 31 }
                     .sort_by { |skill| DRSkill.getxp(skill) }.first
    return unless needs_training

    data = @training_spells[needs_training]

    if Flags['outdoors-magic-ready'] && mana > 40
      crafting_cast_spell(data, @settings)
      Flags.reset('outdoors-magic-ready')
      @preparing = false
    end

    return if @preparing
    crafting_prepare_spell(data, @settings)
    @preparing = true
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
  end
end

before_dying do
  Flags.delete('outdoors-magic-ready')
end

# Call this last to avoid the need for forward declarations
Outdoorsmanship.new
