=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#find
=end

custom_require.call(%w[common common-travel])

class Find
  include DRC
  include DRCT

  def setup
    crossing_town = [793, 792, 791, 789, 790, 788, 794, 954, 796, 795, 767, 768, 769, 786, 787, 785, 783, 784, 735, 734, 733, 753, 752, 751, 754, 750, 749, 748, 756, 747, 746, 729, 728, 730, 731, 732, 741, 739, 782, 780, 774, 775, 776, 777, 778, 738, 736, 779, 773, 771, 770, 810, 819, 822, 7902, 807, 808, 805, 804, 803, 812, 811, 813, 765, 764, 763, 798, 799, 801, 797, 762, 758, 757, 761, 816, 817, 766, 760, 759]
    crossing_academy = [959, 971, 970, 960, 972, 974, 973, 969, 983, 961, 975, 976, 978, 977, 962, 963, 979, 966, 964, 980, 965]

    dirge_town = [1307, 1308, 1311, 1315, 1316, 1309, 1310, 12_109, 1317, 1318, 1321, 1314, 1313, 1319, 1320]
    shard_town = [2544, 2550, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2522, 19_287, 2517, 2516, 2518, 2520, 2521, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2536, 2537, 2538, 2611, 2503, 2502, 2501, 2496, 2497, 2498, 2511, 2512, 2513, 2514, 2515, 2499, 2500, 2581, 2596, 2575, 2573, 2570, 2567, 2565, 2566, 2564, 2563, 2582, 2585, 2586, 2589, 2597, 2598, 2599, 2600, 2601, 2612, 2607, 2549, 2548, 2547, 2545, 2621, 2544, 2613, 2608, 2617, 2633, 2632, 2631, 2504, 2505, 2506, 2507, 2508, 2509, 2574, 2540, 2539, 2541, 2543, 2603, 2602, 2583, 2584, 2592, 2593, 2594, 2595, 2567, 2571, 2572, 2569, 2568, 2565, 2566, 2564, 2563]
    pilgrimage_trail = [4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194]
    arg_definitions = [
      [
        { name: 'npc', regex: /\w+/, description: 'Unique name/noun of the NPC to find' },
        { name: 'follow', regex: /follow/i, optional: true, description: 'Follow the NPC once it is found' }
      ]
    ]

    args = parse_args(arg_definitions, true)
    @npc = args.npc
    @follow = args.follow

    @rooms = case args.npc
             when /ozursus/i
               crossing_academy
             when /shaman/i
               dirge_town
             when /theurgist/i
               shard_town
             when /monk/i
               pilgrimage_trail
             else
               crossing_town
             end
  end

  def initialize
    setup

    start_index = @rooms.index(Room.current.id) || 0
    search(@rooms.rotate(start_index)) unless found?

    follow if @follow
  end

  def search(room_ids)
    return if room_ids.any? do |room_id|
      walk_to(room_id)
      found?
    end

    echo "***STATUS*** Failed to find an NPC named '#{@npc}', there might be a room missing from the search path"
    exit
  end

  def follow
    echo "***STATUS*** Following '#{@npc}' until you ;k find"
    loop do
      pause 1
      next if found?
      echo "***STATUS*** '#{@npc}' has moved; searching adjacent rooms"
      search(Room.current.wayto.keys)
    end
  end

  def found?
    DRRoom.npcs.any? { |room_npc| room_npc.casecmp(@npc).zero? }
  end
end

Find.new
