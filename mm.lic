=begin
  Documentation:
=end
custom_require.call(%w[common common-arcana])

class MoonMagery
  include DRCA
  def initialize
    args = get_args
    @settings = get_settings

    locate(args.person) if args.locate
  end

  def get_args
    arg_defs = [
      [
        { name: 'locate', regex: /locate/i },
        { name: 'person', regex: /\w+/ }
      ]
    ]

    parse_args(arg_defs)
  end

  def locate(person)
    Flags.add('locate-fail', 'You see a very vague vision of', "The details of #{person}'s location are unclear", 'Your vision is not clear enough for your spell to succeed.', 'There doesn\'t seem to be anyone by that name under the skies')
    data = if @settings.waggle_sets['locate']
             @settings.waggle_sets['locate'].values.first
           else
             check_discern({ 'abbrev' => 'locate' }, @settings)
           end
    data['cast'] = "cast #{person}"
    cast_spell(data, @settings)
    pause 0.25
    if Flags['locate-fail']
      case Flags['locate-fail'].first
      when /Your vision is not clear/
        locate(person)
      when /seem to be anyone by that name/
        echo "#{person.capitalize} is not in-game"
      when /You see a very vague vision of/
        echo "Your locate was too weak to pinpoint #{person.capitalize}"
      when /The details of #{person}'s location are unclear/i
        echo "Couldn't find #{person.capitalize}, it is possible they are in a locate warded room."
      end
    else
      lines = reget(30).map(&:chomp)
      index = lines.find_index('You gesture.')
      lines = lines[index..-1]
      line = lines.find { |line| line =~ /^\[.*\]$/ }
      index = lines.find_index(line)
      room_description = lines[index + 1]
      room_data = Room.list.find { |room| room.description.find { |item| item =~ /#{room_description.split('.').first}/i } }
      echo "#{person.capitalize} appears to be in room ##{room_data.id}" if room_data
    end
    Flags.delete('locate-fail')
  end
end

MoonMagery.new
