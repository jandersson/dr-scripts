# encoding: UTF-8
custom_require.call(%w[common-crafting drinfomon events])

class Workorder
  include DRCC
  attr_accessor :finish_time, :payout

  def initialize
    @db = Script.db
    @recipes = get_data('recipes').crafting_recipes
    create_db
    setup
  end

  def reset
    setup
  end

  def setup
    @charisma = DRStats.charisma.to_i
    @difficulty_settings = get_settings.workorder_diff
    @discipline = 'unknown'
    @start_time = Time.now.to_s
    @finish_time = nil
    @qty = nil
    @difficulty = nil
    @material = nil
    @product = nil
    @payout = nil
    @payout_currency = nil
  end

  def payout_currency=(payout_currency)
    @payout_currency = payout_currency.encode("UTF-8")
  end

  def qty=(qty)
    @qty = qty.to_i
  end

  def product=(product)
    @product = product.encode("UTF-8")
    discipline = DRCC.recipe_lookup(@recipes, @product)['type']
    @discipline = discipline if discipline
    @difficulty = if @difficulty_settings.is_a?(Hash) && discipline
                    @difficulty_settings[discipline]
                  else
                    @difficulty_settings
                  end
    @material = if discipline == 'blacksmithing'
                  "bronze"
                elsif discipline == 'tailoring'
                  "wool"
                end
  end

  def create_db
    @db.execute <<-SQL
      CREATE TABLE IF NOT EXISTS workorders (
        discipline TEXT not null,
        product TEXT not null,
        difficulty TEXT not null,
        payout INTEGER not null,
        payout_currency TEXT not null,
        quantity INTEGER not null,
        start_time TEXT not null,
        finish_time TEXT not null,
        material TEXT not null,
        charisma INTEGER not null
      );
    SQL
  end

  def commit
    @db.execute("INSERT INTO workorders (start_time, finish_time, quantity, difficulty, product, payout, payout_currency, discipline, material, charisma)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", [@start_time, @finish_time, @qty, @difficulty, @product, @payout, @payout_currency, @discipline, @material, @charisma])
  end
end

Flags.add('workorder-get', 'Alright, this is an order for ([\w\s-]+)\. I need (\d+)')
Flags.add('workorder-deliver', 'and are given ([\d,]+) (\w+) in return')
wo = Workorder.new
loop do
  pause 0.05
  if Flags['workorder-get']
    wo.reset
    wo.product = Flags['workorder-get'][1]
    wo.qty = Flags['workorder-get'][2]
    Flags.reset('workorder-get')
  end
  if Flags['workorder-deliver']
    wo.payout = Flags['workorder-deliver'][1].tap { |s| s.delete!(',') }.to_i
    wo.payout_currency = Flags['workorder-deliver'][2]
    wo.finish_time = Time.now.to_s
    wo.commit
    Flags.reset('workorder-deliver')
  end
end

before_dying do
  Flags.delete('workorder-get')
  Flags.delete('workorder-deliver')
end
