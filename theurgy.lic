=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#theurgy
=end

custom_require.call(%w[common common-items common-money common-travel drinfomon spellmonitor equipmanager])

class Theurgy
  include DRC
  include DRCI
  include DRCM
  include DRCT

  ######################## GET/PUT ########################

  def put_in_container(item)
    bput "put #{item} in my #{@theurgy_supply_container}", 'You put', 'What were you referring to'
  end

  def get_from_container(item)
    bput "get #{item} from my #{@theurgy_supply_container}", 'You get', 'I could not find', 'What were you referring to'
  end

  ######################## COMMUNES ########################

  def comm_eluned
    fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
    fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'

    forage? 'dirt'

    get_from_container(@water_holder)
    bput('commune eluned', 'completed this commune too recently', 'You grind some dirt in your fist')
    put_in_container(@water_holder)
    fput('drop dirt') if [left_hand, right_hand].include?('dirt')
  end

  def comm_tamsine
    if inside?('holy water', @water_holder)
      pause 1
      waitrt?
      get_from_container(@water_holder)
      fput "sprinkle #{@water_holder} on #{checkname}"
      bput('commune tamsine', 'completed this commune too recently', 'You feel warmth spread throughout your body')
      put_in_container(@water_holder)
    else
      Flags.delete('theurgy-tamsine')
      nil
    end
  end

  def comm_kert
    @hold_research = nil
    if inside?('holy oil', @theurgy_supply_container)
      get_from_container('holy oil')
    else
      case bput("get oil from #{@theurgy_supply_container}", 'holy oil', 'some oil', 'I could not find', 'What were you referring to')
      when 'I could not find', 'What were you referring to'
        return
      when 'some oil'
        research_check
        fput 'prep bless'
        pause 5
        bput('cast oil', 'leaving it somehow changed', 'nothing else seems to happen', 'backfires')
      end
    end
    if !@hold_research.nil? && Flags['research_done'] == false
      fput "RESEARCH #{@hold_research.upcase} 300"
    end
    if right_hand.include? 'holy oil'
      fput "sprinkle oil on #{checkname}"
      put_in_container('oil')
      bput('commune kertigen', 'completed this commune too recently', 'The thick smell of ozone fills your nostrils')
    else
      EquipmentManager.new.empty_hands
    end
  end

  def comm_truff
    fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
    fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'
    get_from_container('Taffelberries')
    bput('commune truffenyi', 'completed this commune too recently', 'The power of Truffenyi has answered your prayer')
    pause 1
    if right_hand.include? 'orb'
      fput 'drop orb'
    else
      fput 'get Taffelberries'
      put_in_container('Taffelberries')
    end
  end

  ######################## SHOPPING ########################

  def check_supplies
    ensure_copper_on_hand(600, @hometown)
    if DRStats.circle > 60
      buy_taffelberries unless inside?('Taffelberries', @theurgy_supply_container)
    end
    buy_theurgy_supply('incense')
    buy_theurgy_supply('sage')
    buy_theurgy_supply('lavender')
    buy_theurgy_supply('wine')
    buy_oil unless (inside?('holy oil', @theurgy_supply_container) or inside?('some oil', @theurgy_supply_container))
    buy_flint unless inside?('flint', @theurgy_supply_container)
    buy_parchment unless inside?('golden parchment', @theurgy_supply_container)
  end

  def buy_theurgy_supply(item_name)
    return if inside?(item_name, @theurgy_supply_container)

    room = get_data('town')[@hometown]['theurgy_supplies']['id']
    buy_item(room, item_name)
    put_in_container(item_name)
  end

  def buy_flint
    buy_item(8265, 'flint')
    put_in_container('flint')
  end

  def buy_oil
    buy_item(19_076, 'oil')
    put_in_container('oil')
  end

  def buy_parchment
    return unless ensure_copper_on_hand(6300, @hometown)
    walk_to('5735')
    fput 'read placard'
    pause 1
    fput 'order 4 from monk'
    fput 'unroll my parchment'
    put_in_container('golden parchment')
  end

  def buy_taffelberries
    walk_to(8280)
    bput('order 14', 'puts some sugar-dipped taffelberries on the bar', 'You don\'t have enough money to afford that')
    fput 'get Taffelberries'
    put_in_container('Taffelberries')
  end

  ######################## CARVING ########################

  def carve_bead
    walk_to '1030'
    exit unless DRRoom.npcs.empty? # Invasion check
    return unless @immortal_aspect && exists?('carving knife') && exists?('shaper') && exists?('prayer chain')
    prayer_bead
  end

  def prayer_bead
    return unless inside?('holy water', @water_holder)
    return if DRSkill.getrank('Mechanical Lore') <= 140
    @hold_research = nil
    fput "stow #{GameObj.right_hand.noun}" if GameObj.right_hand.name != 'Empty'
    fput "stow #{GameObj.left_hand.noun}" if GameObj.left_hand.name != 'Empty'
    case bput('get prayer chain', 'You get', 'I could not find', 'What were you referring to', 'already in your inventory')
    when 'I could not find', 'What were you referring to'
      echo 'No Prayer Chain Found - Skipping Bead Carve'
      return
    when 'already in your inventory'
      fput 'remove my prayer chain'
      worn_chain = true
    end
    beads = bput('look at my chain', /^Strung on to the prayer bead chain you see .*\./, 'There are currently no beads on it.')
    bead_count = list_to_nouns(beads.match(/^Strung on to the prayer bead chain you see (.*)\./).to_a[1])
    if bead_count.count >= 10
      put_in_container('prayer chain')
      return
    end
    put_in_container('prayer chain')
    research_check
    fput 'prep bless'
    forage? 'limb'
    get_from_container(@water_holder)
    fput("sprinkle #{@water_holder} on my limb")
    put_in_container(@water_holder)
    pause 1
    fput 'cast my limb'
    if !@hold_research.nil? && Flags['research_done'] == false
      fput "RESEARCH #{@hold_research.upcase} 300"
    end
    bput('get carving knife', 'You get', 'I could not find', 'What were you referring to')
    while right_hand.include? 'limb'
      fput('carve my limb with my knife')
      pause 1
      waitrt?
    end
    put_in_container('carving knife')
    bput('get shaper', 'You get', 'I could not find', 'What were you referring to')
    while right_hand.include? 'block'
      fput("shape block to #{@immortal_aspect}")
      pause 1
      waitrt?
    end
    put_in_container('shaper')
    get_from_container('prayer chain')
    fput "put #{@immortal_aspect} bead on prayer chain"
    if worn_chain
      bput('wear prayer chain', 'You attach', 'You are already wearing that', 'Wear what?')
    else
      put_in_container('prayer chain')
    end
  end

  ######################## DEVOTION RITUALS ########################

  def clean_altar
    return unless inside?('holy water', @water_holder)
    get_from_container(@water_holder)
    fput 'clean altar with holy water'
    waitfor 'You finish your job'
    put_in_container(@water_holder)
    waitrt?
  end

  def meditate_bead
    return unless @immortal_aspect

    case bput('get prayer chain', 'You get', 'I could not find', 'What were you referring to', 'already in your inventory')
    when 'I could not find', 'What were you referring to'
      echo 'No Prayer Chain Found - Skipping Prayer Bead Meditation'
      return
    when 'already in your inventory'
      fput 'remove my prayer chain'
      worn_chain = true
    end
    beads = bput('look at my chain', /^Strung on to the prayer bead chain you see .*\./, 'There are currently no beads on it.')
    bead_count = list_to_nouns(beads.match(/^Strung on to the prayer bead chain you see (.*)\./).to_a[1])
    if bead_count.count >= 1
      fput 'kneel'
      fput 'meditate my prayer chain'
      waitfor 'suddenly detaches from your prayer bead chain'
      fix_standing
      if worn_chain
        bput('wear prayer chain', 'You attach', 'You are already wearing that', 'Wear what?')
      else
        put_in_container('prayer chain')
      end
    end
    waitrt?
  end

  def bathe
    move 'go pool'
    get_from_container('sage')
    fput 'rub sage'
    pause 1
    get_from_container('lavender')
    fput 'rub lavender'
    waitfor 'A Dark Grove, A Deep Pool'
    fix_standing
    move 'out'
  end

  def tithe
    return unless @settings.tithe
    delta = Time.now - (UserVars.tithe_timer || Time.now - 14_400)
    return if delta < 60 * 10
    return unless withdraw_exact_amount?('5 silver', @hometown)

    UserVars.tithe_timer = Time.now
    walk_to 741
    bput('put 5 silver kronar in almsbox', 'You drop', 'But you do not')
  end

  def pray
    waitrt?
    if @favor_god
      bput("pray #{@favor_god}", @favor_god, 'Lady of healing', 'reward of hard effort', 'sign with your hand', 'god of the Void', 'bane of accursed', 'blessing be upon your love', 'honorable and true', 'glory shine on us', 'fire across the lands', 'madness and pain', 'floods strike down', 'Lady of supreme beauty')
    else
      bput('pray meraud', 'meraud')
    end
    waitrt?
  end

  def study_wall
    return if DRStats.circle < 30
    return if get_data('spells')
              .spell_data
              .select { |_name, properties| properties['cyclic'] }
              .select { |name, _properties| DRSpells.active_spells.keys.include?(name) }
              .any?

    walk_to '5872'
    move 'go stair'
    waitfor 'Four beautifully detailed figures'
    walk_to '5846'
    case bput('pull candle', 'You tug at the silver candlestick but it', 'You grasp hold of the silver candlestick and pull it back')
    when 'You grasp hold of the silver candlestick and pull it back'
      case bput('study wall', 'Turning your attention to the sigils', 'interrupt your research')
      when 'Turning your attention to the sigils'
        waitfor 'as your understanding of the sigils gradually slips away.'
      when 'interrupt your research'
        echo 'Researching - skipping Study'
      end
      pause
      move 'go hatch'
    end
    walk_to '5756'
    move 'go stair'
    waitfor 'A low relief has been carefully carved'
    walk_to '741'
  end

  def find_seed
    return unless inside?('holy water', @water_holder)
    walk_to '1032'
    exit unless DRRoom.npcs.empty? # Invasion check
    while bput('gather seed', 'You find a tiny', 'This is not a good', 'You come up empty') == 'You come up empty'
      waitrt?
    end
    waitrt?
    plant_seed
  end

  def plant_seed
    walk_to '1031'
    fput('plant seed')
    get_from_container(@water_holder)
    fput("sprinkle #{@water_holder} on room")
    put_in_container(@water_holder)
  end

  def pray_badge
    case bput('remove badge', 'You take off', 'Remove what')
    when 'You take off'
      fput 'pray badge'
      pause 2
      waitrt?
      bput 'wear badge', 'You put on a', 'You are already'
    when 'Remove what'
      return if bput('get badge', 'You get', 'I could not find', 'What were you referring to') != 'You get'
      fput 'pray badge'
      pause 2
      waitrt?
      put_in_container 'pilgrim badge'
    end
  end

  def dance
    return unless DRStats.circle > 9
    until ['flawless performance to those on high', 'In your condition', 'Your dance reaches its conclusion'].include? bput('dance', 'flawless performance to those on high', 'Your dance reaches its conclusion', 'You begin to dance', 'Your actions grow', 'Your dance', 'but you falt', 'In your condition')
      pause 1
      waitrt?
      fix_standing
    end
  end

  def incense_wine
    bput("get #{@flint_lighter}", 'You get', 'I could not find', 'What were you referring to')
    get_from_container('incense')
    while bput('light my incense with flint', 'nothing happens', 'bursts into flames', 'much too dark in here to do that') == 'nothing happens'
      waitrt?
    end
    waitrt?
    fput 'wave incense at altar'
    fput 'snuff incense'
    put_in_container('incense')
    fput "stow #{@flint_lighter}", 'You put your', 'Stow what'
    pause 1
    get_from_container('wine')
    fput 'pour wine on altar'
    put_in_container('wine')
  end

  def recite_prayer
    fput "recite Meraud, power the holy fires that unleash my righteous vengeance;Chadatru, guide my sword to swing in justice;Everild, give me the power to conquer my enemies;Truffenyi, let me not lose sight of compassion and mercy;Else, I will become like those I despise;Urrem'tier, receive into your fetid grasp these wicked souls;May the Tamsine's realms never know their evil ways again;May all the Immortals guide your faithful soldier #{checkname}."
    pause 1
    waitrt?
  end

  def reflectory
    walk_to '5988'
    fput 'meditate'
    waitrt?
    walk_to '1030'
  end

  def invoke_parchment
    return unless inside?('parchment', @theurgy_supply_container)
    walk_to(@safe_room)
    get_from_container('golden parchment')
    fput 'invoke my parchment'
    waitfor 'You conclude'
    put_in_container('golden parchment')
  end

  ######################## CUSTOM TRAVEL ########################

  def enter_altar
    shrine = get_data('shrines')['shrines'][@hometown].find { |s| s['location'] == 'Damaris\' altar near Kaerna' }
    return unless shrine

    walk_to(shrine['start_room'])
    pause
    waitrt?
    shrine['path_in'].each { |dir| move_and_wait(dir) }
  end

  def exit_altar
    shrine = get_data('shrines')['shrines'][@hometown].find { |s| s['location'] == 'Damaris\' altar near Kaerna' }
    return unless shrine

    shrine['path_out'].each { |dir| move_and_wait(dir) }
  end

  def move_and_wait(dir)
    move(dir)
    pause
    waitrt?
  end

  ######################## MISC ########################

  def research_check
    case find_current_project = bput('research status', / (\d+)% complete with a portion .*\./, 'not researching anything', 'project about')
    when /not researching anything/
      return
    when /project about/
      research_type = %w[Fundamental Augmentation Stream Sorcery Utility Warding]
      find_research = research_type.find { |r| find_current_project =~ /#{r}/i }
      @hold_research = find_research
      return if @hold_research.nil?
    when /complete with a portion/
      research_type = %w[Fundamental Augmentation Stream Sorcery Utility Warding]
      find_research = research_type.find { |r| find_current_project =~ /#{r}/i }
      @hold_research = find_research
      return if @hold_research.nil?
      if find_current_project[1, 2].to_i >= 60
        wait_time = (101 - find_current_project[1, 2].to_i) * 3
        Flags.reset('research_done')
        pause wait_time
      else
        echo 'stopping research'
      end
      fput 'prep bless'
    end
    @hold_research
  end

  def commune_check
    if !Flags['theurgy-commune']
      next_commune
    elsif Flags['theurgy-commune'].include? 'fully prepared to seek assistance from the Immortals once again'
      next_commune
    end
  end

  def next_commune
    if !Flags['theurgy-eluned'] && DRStats.circle > 3 && DRSkill.getrank('Outdoorsmanship') >= 20 && DRSkill.getxp('Theurgy') <= 31
      comm_eluned
    elsif !Flags['theurgy-tamsine'] && DRStats.circle > 2 && DRSkill.getxp('Theurgy') <= 31
      comm_tamsine
    elsif !Flags['theurgy-truffenyi'] && DRStats.circle > 60 && DRSkill.getxp('Theurgy') <= 24
      comm_truff
    elsif !Flags['theurgy-kertigen'] && DRStats.circle > 8 && DRSkill.getxp('Theurgy') <= 31
      comm_kert
    end
  end

  def initialize
    settings = get_settings
    @theurgy_supply_container = settings.theurgy_supply_container
    @water_holder = settings.water_holder
    @hometown = settings.hometown
    @immortal_aspect = settings.immortal_aspect
    @flint_lighter = settings.flint_lighter
    @favor_god = settings.favor_god
    @safe_room = settings.safe_room

    ######################## FLAGS ########################

    Flags.add('theurgy-commune', 'fully prepared to seek assistance from the Immortals once again', 'You will not be able to open another divine conduit yet', 'You grind some dirt in your fist', 'You feel warmth spread throughout your body', 'The power of Truffenyi has answered your prayer', 'The thick smell of ozone fills your nostrils')
    Flags.add('theurgy-eluned', 'You grind some dirt in your fist', 'The waters of Eluned are still in your thoughts')
    Flags.add('theurgy-tamsine', 'You feel warmth spread throughout your body', 'You have been recently enlightened by Tamsine')
    Flags.add('theurgy-truffenyi', 'The power of Truffenyi has answered your prayer', 'You are still captivated by Truffenyi\'s favor')
    Flags.add('theurgy-kertigen', 'The thick smell of ozone fills your nostrils', 'The sounds of Kertigen\'s forge still ring in your ears')
    Flags.add('research_done', '^Breakthrough!')

    ######################## SCRIPT ########################

    pray
    check_supplies
    walk_to '741'
    fput 'commune sense'
    waitrt?

    ritual_order = %i[tithe study_wall reflectory carve_bead find_seed enter_altar bathe meditate_bead pray_badge dance incense_wine recite_prayer clean_altar pray exit_altar invoke_parchment]
    ritual_order.each do |ritual|
      commune_check
      send(ritual)
    end

    fput 'commune'
  end
end

Theurgy.new
