=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#oshu_manor
=end

custom_require.call(%w[common common-travel common-items events drinfomon])

class Oshu
  include DRC
  include DRCT
  include DRCI

  def initialize
    arg_definitions = [
      [
        { name: 'worm', regex: /^worm/i, description: 'Hunt grave worms' }
      ],
      [
        { name: 'kartais', regex: /^kartais/i, description: 'Hunt seordhevor kartais' }
      ]
    ]

    args = parse_args(arg_definitions)

    @critter = args

    settings = get_settings
    @ignored_npcs = settings.ignored_npcs
    @waiting_room = 2317
    @graves = [2334, 2337, 2338, 2317]
    @grave_exits = [2356, 2349, 2347]
    Flags.add('allready', "The gargoyle head doesn't budge.")
    Flags.add('blasted', 'The blast catches you fully and sends you careening northward through the air!')
    Flags.add('head-reset', 'A stone gargoyle head suddenly makes a series of loud grinding')

    stow_hands
    grave_digger
  end

  def safe_to_dig?
    (DRRoom.npcs - @ignored_npcs).empty?
  end

  def grave_digger
    @graves.each do |grave|
      walk_to(grave)
      grave_digger if Room.current.id == @waiting_room
      break if safe_to_dig?
    end
    case bput('dig grave', 'You struggle to dig', 'You use your bare hands')
    when 'You struggle to dig'
      waitrt?
      grave_digger
    when 'You use your bare hands'
      waitrt?
      waitfor('You dig to the surface')
      waitrt?
      fix_standing
      return if @critter.worm
      puzzle_begin if @critter.kartais
    end
    grave_digger
  end

  def puzzle_begin
    walk_to(2350)
    stow_hands
    case bput('push statue', 'and it settles into its new position with a click', 'The granite statue has already been pushed', 'You must have both hands free to do that.')
    when 'You must have both hands free to do that.'
      stow_hands
      puzzle_begin
    end
    to_house
  end

  def to_house
    walk_to(2340)
    move('go house')
    move('south')
    head_game
  end

  def blasted?
    return unless Flags['blasted']
    Flags.reset('blasted')
    fix_standing
    move('south')
  end

  def head_reset?
    return unless Flags['head-reset']
    Flags.reset('head-reset')
    head_game
  end

  def wait_and_check
    pause
    waitrt?
    blasted?
    head_reset?
  end

  def head_game
    stow_hands
    fput 'look head'
    pause 1
    last_lines = reget(20)
                 .flatten
    gotfire = last_lines.any? { |line| line.include?('the crooked nose of the gargoyle head is pointed towards the word "Fire."') }
    head_turner('Fire') unless gotfire
    wait_and_check
    bput('push claw', 'claw is already pushed up as far as it will', 'and it clicks into place')
    wait_and_check
    bput('push head', 'The gargoyle head shudders as something inside grinds into', 'Roundtime')
    wait_and_check
    head_turner('Exchange')
    wait_and_check
    bput('pull claw', ' as far as it will', 'and it clicks into place')
    wait_and_check
    bput('push head', 'The gargoyle head shudders as something inside grinds into', 'Roundtime')
    wait_and_check
    head_turner('Poison')
    wait_and_check
    bput('push claw', 'claw is already pushed up as far as it will', 'and it clicks into place')
    wait_and_check
    bput('push head', 'The gargoyle head shudders as something inside grinds into', 'Roundtime')
    wait_and_check
    fput('pull lever')
    gtfo
  end

  def open?
    return unless Flags['allready']
    Flags.reset('allready')
    gtfo
  end

  def head_turner(word)
    waitrt?
    open?
    bput('turn head', 'Roundtime', "The gargoyle head doesn't budge.")
    word_list = reget(4)
                .flatten
    head_turner(word) unless word_list.any? { |line| line.include?("You grab the gargoyle head and wrestle it around until it points at the word \"#{word}.\"") }
  end

  def gtfo
    move('north')
    move('go door')
    pause 1
    unless Room.current.id == 2340
      move('south')
      fput('pull lever')
      gtfo
    end
    walk_to(2345)
    move('go door')
    exit
  end
end

before_dying do
  Flags.delete('allready')
  Flags.delete('blasted')
  Flags.delete('head-reset')
end

Oshu.new
