=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#equipmanager
=end

custom_require.call(%w[common common-items common-travel events])

class EquipmentManager
  include DRC
  include DRCI
  include DRCT

  def initialize(settings = nil)
    items(settings)
  end

  def items(settings = nil)
    return @items if @items
    settings ||= get_settings
    @gear_sets = settings.gear_sets
    @sort_head = settings.sort_auto_head
    @items = settings.gear.map { |item| Item.new(name: item[:name], leather: item[:is_leather], hinders_locks: item[:hinders_lockpicking], worn: item[:is_worn], swappable: item[:swappable], tie_to: item[:tie_to], adjective: item[:adjective], bound: item[:bound], wield: item[:wield], transforms_to: item[:transforms_to], transform_verb: item[:transform_verb], transform_text: item[:transform_text], lodges: item[:lodges]) }
  end

  def remove_gear_by(&_block)
    combat_items = get_combat_items
    gear = desc_to_items(combat_items).select { |item| yield(item) }
    gear.each { |item| remove_item(item) }
    gear
  end

  def wear_items(items_list)
    items_list.each { |item| wear_item?(item) }

    fput('sort auto head') if @sort_head
  end

  def wear_equipment_set?(set_name)
    return false unless set_name

    worn_items = desc_to_items(@gear_sets[set_name])
    echo("expected worn items:#{worn_items.map(&:short_name).join(',')}") if UserVars.equipmanager_debug
    unless worn_items
      echo("Could not find gear set #{set_name}")
      return false
    end

    combat_items = get_combat_items

    remove_unmatched_items(combat_items, worn_items)

    lost_items = wear_missing_items(worn_items, combat_items)
    notify_missing(lost_items)

    fput('sort auto head') if @sort_head

    lost_items.empty?
  end

  def desc_to_items(descs)
    descs.map { |description| item_by_desc(description) }.compact
  end

  def item_by_desc(description)
    items.find { |item| item.short_regex =~ description }
  end

  def notify_missing(lost_items)
    return unless lost_items
    return if lost_items.empty?

    beep
    echo 'MISSING EQUIPMENT: Please verify these items are in a closed container and not lost:'
    echo lost_items.map(&:short_name).join(', ').to_s
    pause
    beep
  end

  def wear_missing_items(worn_items, combat_items)
    if UserVars.equipmanager_debug
      echo('wearing missing items between these two sets')
      echo(combat_items.join(',').to_s)
      echo(worn_items.map(&:short_name).join(',').to_s)
    end

    missing_items = worn_items
                    .reject { |item| combat_items.find { |c_item| item.short_regex =~ c_item } }
                    .reject { |item| [right_hand, left_hand].grep(item.short_regex).any? ? (stow_weapon(item.short_name) || true) : false }

    echo("wear missing items #{missing_items}") if !missing_items.empty? && UserVars.equipmanager_debug
    missing_items.reject { |item| wear_item?(item) }
  end

  def remove_unmatched_items(combat_items, worn_items)
    if UserVars.equipmanager_debug
      echo('removing unmatched items between these two sets')
      echo(combat_items.join(',').to_s)
      echo(worn_items.map(&:short_name).join(',').to_s)
    end
    combat_items
      .reject { |description| worn_items.find { |item| item.short_regex =~ description } }
      .map { |description| items.find { |item| item.short_regex =~ description } }
      .compact
      .each { |item| remove_item(item) }
  end

  def get_combat_items
    bput('inv combat', 'Type INVENTORY HELP for more options')
    snapshot = reget(40)
    if snapshot.grep(/All of your combat|You aren't wearing anything like that/).any? &&
       snapshot.grep(/Type INVENTORY HELP/).any?
      snapshot
        .map(&:strip)
        .reverse
        .take_while { |item| !['All of your combat:', "You aren't wearing anything like that."].include?(item) }
        .drop_while { |item| item != '[Type INVENTORY HELP for more options]' }
        .drop(1)
        .reverse
    else
      get_combat_items
    end
  end

  def worn_items(list)
    filter_gear = desc_to_items(list)
    gear = desc_to_items(get_combat_items)
    gear.select { |x| filter_gear.include?(x) }
  end

  def remove_item(item)
    bput("remove my #{item.short_name}", "You .*#{item.name}", 'The leather gauntlets slide')
    waitrt?
    if /more room/ =~ bput("stow my #{item.short_name}", 'You put', 'There isn\'t any more room')
      bput("wear my #{item.short_name}", 'You ')
    end
    waitrt?
  end

  def wear_item?(item)
    if item.nil?
      echo('failed to match an item, try turning on debugging with ;e UserVars.equipmanager_debug = true')
      return false
    end
    case bput("get my #{item.short_name}", item.short_regex, '^You get ', '^What were you referring')
    when item.short_regex
      fput("wear my #{item.short_name}")
      waitrt?
      return true
    when /^You get /
      fput("stow my #{item.short_name}")
    else
      return false
    end
  end

  def wield_weapon_offhand(description)
    return if description.empty?

    weapon = item_by_desc(description)
    unless weapon
      echo("failed to match a weapon for #{description}")
      return
    end

    get_item?(weapon)
  end

  def wield_weapon(description, skill = nil)
    return if description.empty?

    offhand = skill == 'Offhand Weapon'
    weapon = item_by_desc(description)
    unless weapon
      echo("failed to match a weapon for #{description}:#{skill}")
      return
    end

    if [left_hand, right_hand].grep(weapon.short_regex).any?
      stow_weapon
      get_item?(weapon)
    end

    get_item?(weapon)

    swap_to_skill(weapon.name, skill) if skill && weapon.swappable
    bput('swap', 'You move') if offhand && right_hand
  end

  def get_item?(item)
    if item.wield
      bput("wield my #{item.short_name}", 'You draw', 'You deftly remove', 'You slip', 'Wield what') != 'Wield what'
    elsif item.transforms_to
      item = item_by_desc(item.transforms_to)
      item.worn ? get_item_helper(item, :worn) : get_item_helper(item, :stowed)
      get_item_helper(item, :transform)
    elsif (item.tie_to && get_item_helper(item, :tied)) || (item.worn && get_item_helper(item, :worn)) || get_item_helper(item, :stowed)
      true
    else
      echo("Could not find #{item.short_name} anywhere.")
      false
    end
  end

  def is_listed_item?(desc)
    items.find { |item| item.short_regex =~ desc }
  end

  def return_held_gear(gear_set = 'standard')
    return unless right_hand || left_hand
    todo = [left_hand, right_hand].compact

    worn_items = desc_to_items(@gear_sets[gear_set])

    todo.all? do |held_item|
      if info = worn_items.find { |item| item.short_regex =~ held_item }
        stow_helper("wear my #{info.short_name}", info.short_name, 'You sling', 'You attach', 'You .* unload', 'You strap', 'You slide', 'You work your way into', 'You spin', '^You ', 'You carefully loop', 'slide effortlessly onto your')
        true
      elsif info = items.find { |item| item.short_regex =~ held_item }
        if info.tie_to
          stow_helper("tie my #{info.short_name} to #{info.tie_to}", info.short_name, 'You attach', 'you tie', 'You are a little too busy')
        elsif info.wield
          stow_helper("sheath my #{info.short_name}", info.short_name, 'Sheathing', 'You sheathe', 'You .* unload', 'You secure your', 'You slip', 'You hang', 'You .* strap')
        else
          stow_helper("stow my #{info.short_name}", info.short_name, 'You put', 'You should unload', 'You easily strap', 'You secure your')
        end
        true
      else
        false
      end
    end
  end

  def empty_hands
    return_held_gear || stow_hands
  end

  def verb_data(item)
    {
      worn: {
        verb: 'remove',
        matches: [/^You .*#{item.short_regex}/, /^You (get|sling|pull|work|loosen|slide|remove|yank).*#{item.name}/, 'Remove what', "You aren't wearing that", 'slide themselves off of your'],
        failures: [/^You (get|sling|pull|work|slide|remove|yank) $/],
        failure_recovery: proc { |noun| bput("wear my #{noun}", '^You ') },
        exhausted: ['Remove what', "You aren't wearing that"]
      },
      tied: {
        verb: 'untie',
        matches: [/^You .*#{item.short_regex}/, "^You remove.*#{item.name}", /^.*you untie your .*#{item.short_regex} from it./, '^What were you referring', '^Untie what', '^You are a little too busy'],
        failures: ['You remove', /^You are a little too busy/],
        failure_recovery: proc { |_noun, item, *matches|
                            case matches
                            when ['You are a little too busy']
                              retreat
                              get_item?(item)
                            else
                              stow_weapon
                            end
                          },
        exhausted: ['What were you referring', 'Untie what']
      },
      stowed: {
        verb: 'get',
        matches: [/^You .*#{item.short_regex}/, "^You get.*#{item.name}", '^What were you referring', 'But that is already', 'You are already'],
        failures: ['You get', /But that is already/],
        failure_recovery: proc { |noun| bput("stow my #{noun}", 'You put', 'But that is already in') },
        exhausted: ['What were you referring']
      },
      transform: {
        verb: item.transform_verb,
        matches: [item.transform_text, "You'll need a free hand to do that!", "You don't seem to be holding"],
        failures: [item.transform_text, "You'll need a free hand to do that!", "You don't seem to be holding"],
        failure_recovery: proc do |noun|
                            fput('stow left') if left_hand && left_hand !~ /#{noun}/i
                            fput('stow right') if right_hand && right_hand !~ /#{noun}/i
                            item.worn ? bput("remove my #{noun}", '^You') : bput("get my #{noun}", '^You')
                            bput("#{item.transform_verb} my #{item.short_name}", verb_data(item)[:matches])
                          end,
        exhausted: ['What were you referring']
      }
    }
  end

  def get_item_helper(item, type)
    data = verb_data(item)[type]
    snapshot = [left_hand, right_hand]
    waitrt?
    response = bput("#{data[:verb]} my #{item.short_name}", *data[:matches])
    case response
    when *data[:exhausted]
      return false
    when *data[:failures]
      data[:failure_recovery].call(item.name, item, response)
    else
      pause 0.05 while snapshot == [left_hand, right_hand]
      return true
    end
  end

  def swap_to_skill(noun, skill)
    if noun =~ /\bfan\b/i
      command = skill =~ /edged/i ? 'open' : 'close'
      bput("#{command} my fan", 'you snap', 'already')
      return
    end
    proper_skill = case skill
                   when /^he$|heavy edge|large edge|one-handed/i
                     'heavy edged'
                   when /2he|^the$|twohanded edge|two-handed/i
                     'two-handed edged'
                   when /2hb|^thb$|twohanded blunt/i
                     'two-handed blunt'
                   when /^hb$|heavy blunt|large blunt/i
                     'heavy blunt'
                   when /se|small edged/i
                     '(light edged|medium edged)'
                   when /sb|small blunt/i
                     '(light blunt|medium blunt)'
                   when /lt|light thrown/i
                     'light thrown'
                   when /stave/i
                     '(short|quarter) staff'
                   when /polearms/i
                     '(halberd|pike)'
                   when /ow|offhand weapon/i
                     return
                   else
                     echo('unsupported weapon swap, please help us add this weapon')
                   end

    Flags.add('hand-full', 'You must have two free hands')
    skill_match = / #{proper_skill} /i
    until skill_match =~ bput("swap my #{noun}", skill_match, "\\b#{noun}\\b.*(heavy edged|two-handed edged|heavy blunt|two-handed blunt|light edged|medium edged|light blunt|medium blunt|light thrown|short staff|quarter staff|halberd)")
      pause 0.25
      next unless Flags['hand-full']
      fput('stow left') if left_hand && left_hand !~ /#{noun}/i
      fput('stow right') if right_hand && right_hand !~ /#{noun}/i
      Flags.reset('hand-full')
    end
  end

  def unload_weapon(name)
    result = bput("unload my #{name}", 'You unload', 'Your .* fall.* from', 'As you release the string')
    waitrt?
    bput('stow left', 'You put') if result == 'You unload'
  end

  def stow_weapon(description = nil)
    unless description
      return unless right_hand || left_hand
      stow_weapon(right_hand) if right_hand
      stow_weapon(left_hand)  if left_hand
      return
    end
    weapon = item_by_desc(description)
    return unless weapon
    if weapon.wield
      stow_helper("sheath my #{weapon.short_name}", weapon.short_name, 'Sheathing', 'You sheathe', 'You .* unload', 'close the fan', 'You secure your', 'You slip', 'You hang', 'You strap', "You don't seem to be able to move", 'You easily strap')
    elsif weapon.worn
      stow_helper("wear my #{weapon.short_name}", weapon.short_name, 'You sling', 'You attach', 'You .* unload', 'You slide', 'You place', 'close the fan', 'You hang', 'You spin', 'You strap', 'You carefully loop', "You don't seem to be able to move")
    elsif !weapon.tie_to.nil?
      stow_helper("tie my #{weapon.short_name} to #{weapon.tie_to}", weapon.short_name, 'You attach', 'close the fan', 'you tie', 'You are a little too busy', "You don't seem to be able to move")
    elsif weapon.transforms_to
      stow_helper("#{weapon.transform_verb} my #{weapon.short_name}", weapon.short_name, weapon.transform_text)
      stow_weapon(weapon.transforms_to)
    else
      stow_helper("stow my #{weapon.short_name}", weapon.short_name, "You put .*#{weapon.name}", 'You .* unload', 'close the fan', 'You easily strap', "You don't seem to be able to move", 'You secure')
    end
  end

  def stow_helper(action, weapon_name, *accept_strings)
    case bput(action, accept_strings)
    when /unload/
      unload_weapon(weapon_name)
      stow_helper(action, weapon_name, accept_strings)
    when /close the fan/
      fput("close my #{weapon_name}")
      stow_helper(action, weapon_name, accept_strings)
    when /You are a little too busy/
      retreat
      stow_helper(action, weapon_name, accept_strings)
    when /You don't seem to be able to move/
      pause 1
      stow_helper(action, weapon_name, accept_strings)
    end
  end
end
