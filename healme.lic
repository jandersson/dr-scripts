=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#healme
=end

# ***BEGIN USER CONFIG***

UserVars.healme_debug ||= false # turn on echos in the script

# ***END USER CONFIG***

custom_require.call(%w[common common-arcana common-healing events])

class HealMe
  include DRC
  include DRCA
  include DRCH

  def initialize
    @deadly_wounds = %w[SKIN HEAD NECK CHEST ABDOMEN BACK]
    @settings = get_settings

    arg_definitions = [
      [
        { name: 'bleeders', regex: /^[\w\s,]+$/i, variable: true, optional: true, description: 'comma separated list of bleeders to keep. "right arm, chest, back"' }
      ]
    ]

    args = parse_args(arg_definitions)

    heal_self(args.bleeders)
  end

  def severity(wounds)
    wounds.map { |wound| wound['level'] }.inject(&:+)
  end

  def spam_heal(base, camb)
    Flags.add('hm-heal-done', 'Your body is completely healed')
    until Flags['hm-heal-done']
      pause 1 while mana < 25
      prepare?('heal', base)
      charge_and_invoke(@settings.cambrinth, @settings.dedicated_camb_use, camb) unless camb.empty? || camb.nil?
      waitcastrt?
      cast?
      pause 0.5
    end
  end

  def cast_spell(spell, preps, part, internal = false)
    pause 1 while mana < 25
    prepare?(spell, preps.first)
    charge_and_invoke(@settings.cambrinth, @settings.dedicated_camb_use, preps[1..-1]) unless preps[1..-1].empty?
    waitcastrt?
    Flags.reset('hm-partial-heal')
    cast?("cast #{part} #{internal ? 'internal' : ''}")
    pause 0.5
    echo "partial: #{Flags['hm-partial-heal']}" if UserVars.healme_debug
    Flags['hm-partial-heal']
  end

  def heal_wound(part, internal)
    pause 0.5 while cast_spell('HW', @settings.empath_healing['HW'], part, internal)
  end

  def heal_scar(part)
    pause 0.5 while cast_spell('HS', @settings.empath_healing['HS'], part)
  end

  def heal_wounds(wounds, skip_parts)
    echo "healing: #{wounds}" if UserVars.healme_debug

    return if skip_parts.include?(wounds.first['part']) && wounds.size == 1

    if wounds.count { |wound| wound['type'] == 'Fresh' } > 0
      heal_wound(wounds.first['part'], skip_parts.include?(wounds.first['part']))
    end
    heal_scar(wounds.first['part'])
  end

  def need_healing?(health=nil)
    health = check_health unless health
    !health['wounds'].empty? || health['diseased'] || health['poisoned']
  end
  
  def cure_disease(spells, health)
    return unless health['diseased']
    return unless spells['Cure Disease']

    Flags.add('hm-disease', 'You feel completely cured of all disease', 'you don.t seem to be so afflicted')
    until Flags['hm-disease']
      DRCA.cast_spell(spells['Cure Disease'], @settings)
    end
    Flags.delete('hm-disease')
  end

  def flush_poisons(spells, health)
    return unless health['poisoned']
    return unless spells['Flush Poisons']

    Flags.add('hm-poison', '^A sudden wave of heat washes over you as your spell attempts to flush poison from your body but finds no toxins', '^A sudden wave of heat washes over you as your spell flushes all poison from your body')
    until Flags['hm-poison']
      DRCA.cast_spell(spells['Flush Poisons'], @settings)
    end
    Flags.delete('hm-poison')
  end

  def heal_self(skip_parts)
    return unless DRStats.empath?

    Flags.delete('hm-partial-heal')
    Flags.add('hm-partial-heal',
              'appear very slightly improved\.',
              'appear slightly improved\.',
              'appear better\.',
              'appear greatly improved\.',
              'appear almost completely healed\.',
              'but it is ineffective\.',
              'appear somewhat better\.',
              'appear considerably better\.')

    health = check_health
 
    using_waggle = false
    spells = if @settings.waggle_sets['healing']
               using_waggle = true
               @settings.waggle_sets['healing']
             else
               @settings.empath_healing
             end
    find_cambrinth(@settings.cambrinth, @settings.stored_cambrinth, @settings.cambrinth_cap)

    DRCA.cast_spell(spells['Regenerate'], @settings) if spells['Regenerate'] && !DRSpells.active_spells.include?('Regenerate')

    if spells['Heal'] && using_waggle && skip_parts.nil?
      spam_heal(@settings.waggle_sets['healing']['Heal']['mana'], @settings.waggle_sets['healing']['Heal']['cambrinth'])
    elsif @settings.empath_healing['HEAL'] && skip_parts.nil?
      spam_heal(@settings.empath_healing['HEAL'].first, @settings.empath_healing['HEAL'][1..-1])
    else
      wounds = check_perc_health

      skip_parts = skip_parts.split(',').map(&:upcase).map(&:strip)

      echo("skip: #{skip_parts}") if UserVars.healme_debug
      echo("wounds: #{wounds}") if UserVars.healme_debug
      echo("dw: #{@deadly_wounds}") if UserVars.healme_debug
      danger_wounds = wounds.select { |part, _| @deadly_wounds.include?(part) }.sort_by { |_, val| severity(val) }.reverse

      echo("bad wounds: #{danger_wounds}") if UserVars.healme_debug

      danger_wounds.each do |(part, _)|
        heal_wounds(wounds[part], skip_parts)
        wounds.delete(part)
      end

      wounds.sort_by { |_, val| severity(val) }.reverse_each { |_, wound| heal_wounds(wound, skip_parts) }
    end

    stow_cambrinth(@settings.cambrinth, @settings.stored_cambrinth, @settings.cambrinth_cap)
  end
end
HealMe.new
