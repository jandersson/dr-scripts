
custom_require.call(%w[common common-money common-travel])
script.want_downstream_xml = true

class ShopUpdater
  include DRC
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'plaza_room', regex: /\d+/, description: 'Id of plaza room shop is in' },
        { name: 'shop_entrance', regex: /\w+/i, description: 'shop entrance noun' }
      ],
      [
        { name: 'city', options: %w[crossing riverhaven shard], description: 'city to scan' }
      ]
    ]
    args = parse_args(arg_definitions)

    crossing_shop_rooms = [7907, 7910, 7912, 7911, 7913, 7915, 7916, 7908, 7909, 7920, 7918, 7917, 7914, 7938, 7939, 7940, 7945, 7944, 7943, 7942, 7941, 7932, 7933, 7934, 7935, 7936, 7937]
    riverhaven_shop_rooms = [7864, 7865, 7866, 7867, 7869, 7870, 7868, 7871, 7872, 7873]
    shard_shop_rooms = [8017, 8023, 8022, 8021, 8020, 8019, 8018]

    if args.plaza_room && args.shop_entrance
      if crossing_shop_rooms.include?(args.plaza_room.to_i)
        setup_city_data('crossing')
      elsif riverhaven_shop_rooms.include?(args.plaza_room.to_i)
        setup_city_data('riverhaven')
      elsif shard_shop_rooms.include?(args.plaza_room.to_i)
        setup_city_data('shard')
      end
      walk_to(args.plaza_room)
      pause
      @current_room = args.plaza_room
      visit_shop(args.shop_entrance)
    else
      shopping_rooms = []
      setup_city_data(args.city)
      case args.city
      when 'riverhaven'
        shopping_rooms = riverhaven_shop_rooms
      when 'crossing'
        shopping_rooms = crossing_shop_rooms
      when 'shard'
        shopping_rooms = shard_shop_rooms
      end
      shopping_rooms.each { |room_id| visit_plaza_room(room_id) }
    end
  end

  def setup_city_data(city)
    case city
    when 'riverhaven'
      @coin_type = 'Lirums'
      @city = 'Riverhaven'
    when 'crossing'
      @coin_type = 'Kronars'
      @city = 'Crossing'
    when 'shard'
      @coin_type = 'Dokoras'
      @city = 'Shard'
    end
  end

  def visit_plaza_room(room_id)
    walk_to(room_id)
    @current_room = room_id
    %w[door entrance arch].each { |entrance| visit_shop(entrance) }
  end

  def visit_shop(entrance)
    shop_data = { entrance: entrance, root_room: @current_room, city: @city, updated_at: Time.now.utc }
    store_listing = bput("look #{entrance}", "'.*'.* open .*", 'is not owned by anybody')
    if store_listing =~ /'(.*)' is owned by (\w+)/
      shop_data[:name] = Regexp.last_match(1)
      shop_data[:owner] = Regexp.last_match(2)
    elsif store_listing =~ /'(.*)'s Shop' will be open /
      shop_data[:name] = "#{Regexp.last_match(1)}'s Shop"
      shop_data[:owner] = Regexp.last_match(1)
    elsif store_listing =~ /is not owned by anybody/
      shop_data[:name] = 'Empty'
      shop_data[:owner] = 'No-one'
      shop_data[:surfaces] = {}
      shop_data[:open_time] = nil
      shop_data[:close_time] = nil
      submit_shop_data(shop_data)
      return
    end

    if store_listing =~ /open between (\w+) and (\w+) Eastern time/
      shop_data[:open_time] = Regexp.last_match(1)
      shop_data[:close_time] = Regexp.last_match(2)
    elsif store_listing =~ /is in attendance/
      shop_data[:open_time] = nil
      shop_data[:close_time] = nil
    end

    case bput("go #{entrance}", 'An attendant approaches you and says', 'obvious exits', 'A guard steps in front of you')
    when /obvious exits/i
      shop_data[room: Room.current.id]
      update_shop(shop_data)
      bput('out', 'obvious exits')
    when /A guard steps/
      shop_data[:surfaces] = {}
    end

    submit_shop_data(shop_data)
  end

  def update_shop(shop_data)
    clear
    room_objs = []
    fput('shop')
    until (line = get) =~ /to see what's on it|There is nothing to buy here/
      room_objs << Regexp.last_match(1) if line =~ /cmd='(shop .*)'>/
    end
    shop_data[:surfaces] = {}
    room_objs.each { |cmd| update_surface(shop_data, cmd) }
  end

  def update_surface(shop_data, cmd)
    clear
    surface_objs = []
    surface_name = nil
    fput(cmd)
    until (line = get) =~ /to see some details/
      if line =~ /cmd='(shop .*)'>(.*) for (.*) #{@coin_type}</
        surface_objs << [Regexp.last_match(1), Regexp.last_match(2), Regexp.last_match(3)]
      end
      surface_name = Regexp.last_match(1) if line =~ /cmd='shop'>(.*)</
    end
    shop_data[:surfaces][surface_name] = surface_objs.map { |c, long_name, fallback_cost| build_item_data(shop_data, c, long_name, fallback_cost) }
  end

  def build_item_data(_shop_data, cmd, long_name, fallback_cost)
    item_data = { long: long_name }

    clear
    waitrt?
    fput(cmd)
    last_index = nil
    until (line = get.chomp.strip) =~ /if you like/
      if line =~ /USAGE:/
        item_data['cost'] = fallback_cost
        return item_data
      end
      next if line =~ /<pushBold/
      next if line =~ /You'll have to hold the \w+ to read it/
      next if line =~ /You see nothing unusual|There is nothing there to read/
      if line =~ /(Short|Cost|Read|Look|Worn):\s+(.*)/
        item_data[Regexp.last_match(1).downcase] = Regexp.last_match(2).strip
        last_index = Regexp.last_match(1).downcase
      elsif item_data[last_index] && line =~ /^([^<].+)$/
        item_data[last_index] += "\n#{Regexp.last_match(1)}" unless item_data[last_index].include?(line)
      end
    end

    item_data['cost'] = item_data['cost'].to_i
    if @coin_type == 'Lirums'
      item_data['base_cost'] = item_data['cost']
      item_data['cost'] = (item_data['cost'] * 1.25).floor
    elsif @coin_type == 'Dokoras'
      item_data['base_cost'] = item_data['cost']
      item_data['cost'] = (item_data['cost'] * (1 / 0.7216)).floor
    end

    item_data
  end
end

ShopUpdater.new
