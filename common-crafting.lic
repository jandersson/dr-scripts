# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-crafting
=end

custom_require.call(%w[common common-travel drinfomon])

module DRCC
  module_function

  def empty_crucible?
    ['nothing in there'].include?(DRC.bput('look in cruc', 'nothing in there', 'you see'))
  end

  def find_empty_crucible(hometown)
    return unless DRC.bput('tap crucible', 'I could not', 'You tap.*crucible') == 'I could not'
    crucibles = get_data('crafting')['blacksmithing'][hometown]['crucibles']
    idle_room = get_data('crafting')['blacksmithing'][hometown]['idle-room']
    DRCT.find_sorted_empty_room(crucibles, idle_room, proc { (DRRoom.pcs - DRRoom.group_members).empty? && empty_crucible? })
  end

  def clean_anvil?
    case result = DRC.bput('look on anvil', 'surface looks clean and ready', "anvil you see an? (.*)\.", 'anvil you see')
    when /surface looks clean and ready/i
      true
    when /anvil you see an?/
      /anvil you see an? (.*)\./ =~ result
      clutter = Regexp.last_match(1).split.last
      case DRC.bput('clean anvil', 'You drag the', 'remove them yourself')
      when /drag/
        fput('clean anvil')
        pause
        waitrt?
      else
        case DRC.bput("get #{clutter} from anvil", 'You get', 'is not yours')
        when 'is not yours'
          fput('clean anvil')
          fput('clean anvil')
        when 'You get'
          bput("put #{clutter} in bucket", 'You drop')
        else
          return false
        end
      end
      true
    else
      false
    end
  end

  def find_wheel(hometown)
    wheels = get_data('crafting')['tailoring'][hometown]['spinning-rooms']
    idle_room = get_data('crafting')['tailoring'][hometown]['idle-room']
    DRCT.find_sorted_empty_room(wheels, idle_room)
  end

  def find_anvil(hometown)
    return unless DRC.bput('tap anvil', 'I could not', 'You tap.*anvil') == 'I could not'
    anvils = get_data('crafting')['blacksmithing'][hometown]['anvils']
    idle_room = get_data('crafting')['blacksmithing'][hometown]['idle-room']
    DRCT.find_sorted_empty_room(anvils, idle_room, proc { (DRRoom.pcs - DRRoom.group_members).empty? && clean_anvil? })
  end

  def find_grindstone(hometown)
    return unless DRC.bput('tap grindstone', 'I could not', 'You tap.*grindstone') == 'I could not'
    grindstones = get_data('crafting')['blacksmithing'][hometown]['grindstones']
    idle_room = get_data('crafting')['blacksmithing'][hometown]['idle-room']
    DRCT.find_sorted_empty_room(grindstones, idle_room)
  end

  def find_sewing_room(hometown, override = nil)
    if override
      DRCT.walk_to(override)
    else
      sewingrooms = get_data('crafting')['tailoring'][hometown]['sewing-rooms']
      idle_room = get_data('crafting')['tailoring'][hometown]['idle-room']
      DRCT.find_sorted_empty_room(sewingrooms, idle_room)
    end
  end

  def find_shaping_room(hometown, override = nil)
    if override
      DRCT.walk_to(override)
    else
      shapingrooms = get_data('crafting')['shaping'][hometown]['shaping-rooms']
      idle_room = get_data('crafting')['shaping'][hometown]['idle-room']
      DRCT.find_sorted_empty_room(shapingrooms, idle_room)
    end
  end

  def recipe_lookup(recipes, item_name)
    match_names = recipes.map { |x| x['name'] }.select { |x| x =~ /#{item_name}/i }
    case match_names.length
    when 0
      echo("No recipe in base-recipes.yaml matches #{item_name}")
      nil
    when 1
      recipes.find { |x| x['name'] =~ /#{item_name}/i }
    else
      echo('Please select desired recipe ;send #')
      match_names.each_with_index { |x, i| respond "    #{i + 1}: #{x}" }
      line = get until line.strip =~ /^([0-9]+)$/
      item_name = match_names[Regexp.last_match(1).to_i - 1]
      recipes.find { |x| x['name'] =~ /#{item_name}/i }
    end
  end

  def find_recipe(chapter, match_string)
    case bput("turn my book to chapter #{chapter}", 'You turn', 'You are too distracted to be doing that right now', 'The book is already turned')
    when 'You are too distracted to be doing that right now'
      echo '***CANNOT TURN BOOK, ASSUMING I AM ENGAGED IN COMBAT***'
      fput('look')
      fput('exit')
    end
    recipe = DRC.bput('read my book', "Page \\d+.*#{match_string}").split('Page').find { |x| x =~ /#{match_string}/i }
    recipe =~ /(\d+):/
    Regexp.last_match(1)
  end

  def get_crafting_item(name, bag, bag_items, belt, skip_exit = false)
    waitrt?
    if belt && belt['items'].find { |item| /\b#{name}/i =~ item || /\b#{item}/i =~ name }
      if DRC.bput("untie my #{name} from my #{belt['name']}", 'You (remove|untie)', 'Untie what') =~ /You (remove|untie)/
        return
      end
    end
    command = "get my #{name}"
    command += " from my #{bag}" if bag_items && bag_items.include?(name)
    case DRC.bput(command, '^You get', '^You are already', '^What do you', '^What were you', 'You pick up', "can't quite lift it")
    when 'What do you', 'What were you'
      beep 
      echo("You seem to be missing: #{name}")
      exit unless skip_exit
    when "can't quite lift it"
      get_crafting_item(name, bag, bag_items, belt)
    end
  end

  def stow_crafting_item(name, bag, belt)
    return unless name

    waitrt?
    if belt && belt['items'].find { |item| /\b#{name}/i =~ item || /\b#{item}/i =~ name }
      DRC.bput("tie my #{name} to my #{belt['name']}", 'you attach')
    else
      case DRC.bput("put my #{name} in my #{bag}", 'You put your', 'What were you referring to', 'is too \w+ to fit', 'You can\'t put that there')
      when /is too \w+ to fit/
        fput("stow my #{name}")
      when 'You can\'t put that there'
        fput("put my #{name} in my other #{bag}")
        return false
      end
    end
    true
  end

  def logbook_item(logbook, noun, container)
    DRC.bput("get my #{logbook} logbook", 'You get')
    case bput("bundle my #{noun} with my logbook", 'You notate the', 'This work order has expired', 'The work order requires items of a higher quality', 'That isn\'t the correct type of item for this work order.')
    when 'This work order has expired', 'The work order requires items of a higher quality', 'That isn\'t the correct type of item for this work order.'
      dispose_trash(noun)
    end
    case DRC.bput("put my #{logbook} logbook in my #{container}", 'You put', 'What were you referring to')
    when 'What were you referring to'
      DRC.bput("stow my #{logbook} logbook", 'You put', 'What were you referring to')
    end
  end
end
