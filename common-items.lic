# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-items
=end

$TRASH_STORAGE = %w[bin gloop barrel bucket urn log arms stump]

custom_require.call(%w[common common-travel])

module DRCI
  module_function

  def buy_item(room, item)
    DRCT.walk_to(room)

    # Amount to pay should be first capturing group.
    patterns = [/prepared to offer it to you for (.*) (?:kronar|lirum|dokora)s?/,
                /Let me but ask the humble sum of (.*) coins/,
                /for a (?:mere )?(.*) (?:kronar|lirum|dokora)s?/,
                /I can let that go for...(.*) (?:kronar|lirum|dokora)s?/,
                /cost you (?:just )?(.*) (?:kronar|lirum|dokora)s?/,
                /it may be yours for just (.*) (?:kronar|lirum|dokora)s?/,
                /I'll give that to you for (.*) (?:kronar|lirum|dokora)s?/,
                /I ask that you give (.*) copper (?:kronar|lirum|dokora)s?/,
                /it'll be (.*) (?:kronar|lirum|dokora)s?/,
                /tis only (.*) (?:kronar|lirum|dokora)s?/,
                /That will be (.*) copper (?:kronar|lirum|dokora)s? please/,
                'You decide to purchase',
                'Buy what']

    match = DRC.bput("buy #{item}", *patterns)
    if match
      patterns.each { |p| break if p.match(match) }
    end
    amount = Regexp.last_match(1)

    fput("offer #{amount}") if amount
  end

  def count_boxes(container)
    # The negative look ahead ignores the term 'boxes' which is output by the rummage /b command
    box_nouns_re = /#{Regexp.union(get_data('items').box_nouns)}(?!es)/
    contents = DRC.bput("rummage /b #{container}", '^You rummage .*')
    contents.scan(box_nouns_re).size
  end

  def order_item(room, item_number)
    DRCT.walk_to(room)

    return if DRC.bput("order #{item_number}", 'Just order it again', 'you don\'t have enough coins') == 'you don\'t have enough coins'
    DRC.bput("order #{item_number}", 'takes some coins from you')
  end

  def dispose(item, trash_room = nil)
    DRCT.walk_to(trash_room) unless trash_room.nil?
    case DRC.bput("get my #{item}", 'You get', 'What were you', 'You pick up')
    when 'You get', 'You pick up'
      dispose_trash(item)
    end
  end

  def dispose_trash(item)
    return if item.nil?
    trashcans = DRRoom.room_objs
                      .map { |long_name| DRC.get_noun(long_name) }
                      .select { |obj| $TRASH_STORAGE.include?(obj) }

    trashcans.each do |trashcan|
      if trashcan == 'gloop'
        trashcan = 'bucket' if DRRoom.room_objs.include? 'bucket of viscous gloop'
        trashcan = 'cauldron' if DRRoom.room_objs.include? 'small bubbling cauldron of viscous gloop'
      elsif trashcan == 'arms'
        trashcan = 'statue'
      end

      if /^You (drop|put)/ =~ DRC.bput("put my #{item} in #{trashcan}", '^You drop', '^You put', "You're kidding, right", 'What were you referring to')
        return
      end
    end
    DRC.bput("drop my #{item}", 'You drop', 'What were you', 'You spread .* on the ground.')
  end

  def search?(item)
    /Your .* is in/ =~ DRC.bput("inv search #{item}", 'You can\'t seem to find anything that looks like that', 'Your .* is in')
  end

  def wearing?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find', 'on the shoulder')
    result =~ /wearing/
  end

  def inside?(description, container)
    result = DRC.bput("tap my #{description} in my #{container}", 'You tap .*', 'I could not find', 'on the shoulder')
    result =~ /inside/
  end

  def exists?(description)
    result = DRC.bput("tap my #{description}", 'You tap .*', 'I could not find', 'on the shoulder', '^You thump your fingers')
    result =~ /You tap|You thump/
  end

  def count_item_parts(item)
    match_messages = [
      /and see there (?:is|are) (.+) left\./,
      /There (?:is|are) (.+) parts? left/
    ]
    count = case DRC.bput("count my #{item}",
                          'I could not find what you were referring to.',
                          'tell you much of anything.',
                          *match_messages)
            when 'I could not find what you were referring to.'
              0
            when 'tell you much of anything.'
              echo "ERROR: count_item_parts called on non-stackable item: #{item}"
              count_items(item)
            when *match_messages
              DRC.text2num(Regexp.last_match(1).tr('-', ' '))
            end
    waitrt?
    count
  end

  def count_items(item)
    /inside your (.*).|I could not find/ =~ DRC.bput("tap my #{item}", 'inside your (.*).', 'I could not find')
    container = Regexp.last_match(1)
    return 0 if container.nil?
    count_items_in_container(item, container)
  end

  def count_items_in_container(item, container)
    contents = DRC.bput("rummage /C #{item} IN MY #{container}", '^You rummage .*', 'That would accomplish nothing')
    # This regexp avoids counting the quoted item name in the message, as
    # well as avoiding finding the item as a substring of other items.
    contents.scan(/ #{item}\W/).size
  end

  def count_lockpick_container(container)
    count = DRC.bput("app my lockpick #{container}", 'and it appears to be full', 'and it might hold an additional \d+', '\d+ lockpicks would probably fit').scan(/\d+/).first.to_i
    waitrt?
    count
  end

  def refill_lockpick_container(lockpick_type, hometown, container, count)
    return if count < 1

    room = get_data('town')[hometown]['locksmithing']['id']

    if room.nil?
      echo '***No locksmith location found for current Hometown! Skipping refilling!***'
      return
    end

    DRCT.walk_to(room)
    if Room.current.id != room
      echo '***Could not reach locksmith location! Skipping refilling!***'
      return
    end

    count.times do
      buy_item(room, "#{lockpick_type} lockpick")
      DRC.bput("put my lockpick on my lockpick #{container}", 'You put')
    end

    # Be polite to Thieves, who need the room to be empty
    DRC.fix_standing
    move('out') if XMLData.room_exits.include?('out')
  end

  def stow_hands
    stow_hand('right') if DRC.right_hand
    stow_hand('left') if DRC.left_hand
  end

  def stow_hand(hand)
    braid_regex = /The braided (.+) is too long/
    result = DRC.bput("stow #{hand}", 'You put', braid_regex, 'is too long')
    dispose_trash(DRC.get_noun(Regexp.last_match(1))) if braid_regex.match(result)
  end
end
