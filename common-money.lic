# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-money
=end

custom_require.call(%w[common common-travel drinfomon])

module DRCM
  module_function

  def minimize_coins(copper)
    denominations = [[10_000, 'platinum'], [1000, 'gold'], [100, 'silver'], [10, 'bronze'], [1, 'copper']]
    denominations.inject([copper, []]) do |result, denomination|
      remaining = result.first
      display = result.last
      if remaining / denomination.first > 0
        display << "#{remaining / denomination.first} #{denomination.last}"
      end
      [remaining % denomination.first, display]
    end.last
  end

  def withdraw_only_coppers(amount, hometown)
    echo "coppers only"
    walk_to(get_data('town')[hometown]['deposit']['id'])
    fput('deposit all')
    on_hand = wealth(hometown)
    if on_hand <= amount
      withdraw_exact_amount?("#{amount - on_hand} copper", hometown)
    end
  end

  def convert_to_copper(amount, denomination)
    return (amount.to_i * 10_000) if 'platinum' =~ /^#{denomination}/
    return (amount.to_i * 1000) if 'gold' =~ /^#{denomination}/
    return (amount.to_i * 100) if 'silver' =~ /^#{denomination}/
    return (amount.to_i * 10) if 'bronze' =~ /^#{denomination}/
    amount
  end

  def hometown_currency(hometown_name)
    get_data('town')[hometown_name]['currency']
  end

  def check_wealth(currency)
    DRC.bput("wealth #{currency}", /\(\d+ copper #{currency}\)/i, /No #{currency}/i).scan(/\d+/).first.to_i
  end

  def wealth(hometown)
    check_wealth(hometown_currency(hometown))
  end

  def ensure_copper_on_hand(copper, settings)
    on_hand = wealth(settings.hometown)
    return true if on_hand >= copper
    withdrawals = minimize_coins(copper - on_hand)
    withdrawals.all? { |amount| withdraw_exact_amount?(amount, settings) }
  end

  def withdraw_exact_amount?(amount_as_string, settings)
    if settings.bankbot_enabled
      DRCT.walk_to(settings.bankbot_room_id)
      DRC.release_invisibility
      if DRRoom.pcs.include?(settings.bankbot_name)
        amount_convert, type = amount_as_string.split
        amount = convert_to_copper(amount_convert, type)
        currency = hometown_currency(settings.hometown)
        case DRC.bput("whisper #{settings.bankbot_name} withdraw #{amount} #{currency}", 'offers you', 'Whisper what to who?')
        when 'offers you'
          DRC.bput('accept tip', 'You accept')
        end
      else
        get_money_from_bank(amount_as_string, settings)
      end
    else
      get_money_from_bank(amount_as_string, settings)
    end
  end

  def get_money_from_bank(amount_as_string, settings)
    DRCT.walk_to(get_data('town')[settings.hometown]['deposit']['id'])
    DRC.release_invisibility
    loop do
      case DRC.bput("withdraw #{amount_as_string}", 'The clerk counts', 'The clerk tells', 'The clerk glares at you.', 'You count out', 'find a new deposit jar', 'If you value your hands', 'Hey!  Slow down!', "You must be at a bank teller's window to withdraw money", "You don't have that much money")
      when 'The clerk counts', 'You count out'
        break true
      when 'The clerk glares at you.', 'Hey!  Slow down!'
        pause 15
      when 'The clerk tells', 'If you value your hands', 'find a new deposit jar', "You must be at a bank teller's window to withdraw money", "You don't have that much money", 'You do not have an account'
        break false
      end
    end
  end

  def debt(hometown)
    currency = hometown_currency(hometown)
    DRC.bput('wealth', /\(\d+ copper #{currency}\)/i, /Wealth:/i).scan(/\d+/).first.to_i
  end

  def deposit_coins(keep_copper, skip_bank, town)
    return if skip_bank

    DRCT.walk_to(get_data('town')[town]['deposit']['id'])
    DRC.release_invisibility
    DRC.bput('wealth', 'Wealth:')
    case DRC.bput('deposit all', 'you drop all your', 'You hand the clerk some coins', "You don't have any", 'There is no teller here', 'reached the maximum balance I can permit')
    when 'There is no teller here'
      return
    end
    minimize_coins(keep_copper).each { |amount| withdraw_exact_amount?(amount, town) }
    DRC.bput('check balance', 'your current balance is')
  end
end
