=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#craft
=end

custom_require.call(%w[drinfomon equipmanager common common-crafting common-items common-money common-travel])

class Craft
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'craft', options: %w[forging outfitting engineering alchemy], description: 'What craft to train' }
      ]
    ]
    args = parse_args(arg_definitions)

    @settings = get_settings
    @hometown = @settings.hometown
    @training_room = (@settings.training_rooms || [@settings.safe_room]).sample
    @settings.storage_containers.each { |container| fput("open my #{container}") }
    @equipment_manager = EquipmentManager.new(@settings)
    @craft_max_mindstate = @settings.craft_max_mindstate
    @yarn_quantity = @settings.yarn_quantity

    if args.craft == 'engineering'
      exit if DRSkill.getxp('Engineering') > @craft_max_mindstate
      train_engineering
    end

    if args.craft == 'outfitting'
      exit if DRSkill.getxp('Outfitting') > @craft_max_mindstate
      train_outfitting
    end

    if args.craft == 'forging'
      exit if DRSkill.getxp('Forging') > @craft_max_mindstate
      train_forging
    end

    if args.craft == 'alchemy'
      echo('Alchemy is only supported by workorders.')
      exit
    end
  end

  def train_outfitting
    rank = DRSkill.getrank('Outfitting')

    if rank <= 25 # Tier 1  Extremely Easy
      sew(5, 'knitted socks', 'socks')
    elsif rank <= 50 # Tier 2 Very Easy
      sew(5, 'knitted mittens', 'mittens')
    elsif rank <= 100 # Tier 3  Easy
      sew(5, 'knitted hat', 'hat')
    elsif rank <= 175 # Tier 4  Simple
      sew(5, 'knitted gloves', 'gloves')
    elsif rank <= 300 # Tier 5  Basic
      sew(5, 'knitted hose', 'hose')
    elsif rank <= 425 # Tier 6  Somewhat Challenging
      sew(5, 'knitted cloak', 'cloak')
    elsif rank <= 650 # Tier 7  Challenging
      sew(5, 'knitted blanket', 'blanket')
    else # Tier 12  Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
    end
  end

  def train_engineering
    rank = DRSkill.getrank('Engineering')

    if rank <= 25 # Tier 1  Extremely Easy
      shape(7, 'wood band', 'band')
    elsif rank <= 50 # Tier 2 Very Easy
      shape(7, 'a wood bracelet', 'bracelet')
    elsif rank <= 100 # Tier 3  Easy
      shape(7, 'wood cloak pin', 'cloak pin')
    elsif rank <= 175 # Tier 4  Simple
      shape(7, 'wood amulet', 'amulet')
    elsif rank <= 300 # Tier 5  Basic
      shape(7, 'wood brooch', 'brooch')
    elsif rank <= 425 # Tier 6  Somewhat Challenging
      shape(7, 'wood armband', 'armband')
    elsif rank <= 600 # Tier 7  Challenging
      shape(7, 'wood choker', 'choker')
    elsif rank <= 700 # Tier 8 - Complicated
      shape(7, 'articulated wood necklace', 'necklace')
    elsif rank <= 850 # Tier 9 - Intricate
      shape(7, 'wood crown', 'crown')
    elsif rank <= 1175 # Tier 10 - Difficult
      shape(7, 'wood comb', 'comb')
    elsif rank <= 1400 # Tier 11 - Very Difficult
      shape(7, 'wood haircomb', 'haircomb')
    else # Tier 12  Extremely Difficult
      echo('*** NOT YET IMPLEMENTED ***')
    end
  end

  def train_forging
    rank = DRSkill.getrank('Forging')
    if rank <= 25 # Tier 1 - Extremely Easy
      smith('a shallow metal cup')
    elsif rank <= 50 # Tier 2 - Very Easy
      smith('a short metal mug')
    elsif rank <= 100 # Tier 3 - Easy
      smith('a back scratcher')
    elsif rank <= 175 # Tier 4 - Simple
      smith('a metal ankle band')
    elsif rank <= 300 # Tier 5 - Basic
      smith('a metal lockpick ring')
    elsif rank <= 425 # Tier 6 - Somewhat Challenging
      smith('a metal armband')
    elsif rank <= 550 # Tier 7 - Challenging
      smith('some metal clippers')
    elsif rank <= 700 # Tier 8 - Complicated
      smith('some squat knitting needles')
    elsif rank <= 850 # Tier 9 - Intricate
      smith('serrated hide scraper')
    elsif rank <= 1175 # Tier 10 - Difficult
      smith('serrated scissors')
    elsif rank <= 1400 # Tier 11 - Very Difficult
      smith('thin sewing needles')
    else # Tier 12 - Extremely Difficult
      smith('trapezoidal wire sieve')
    end
  end

  def money_for_training?(amount, skill)
    if ensure_copper_on_hand(amount, @settings)
      true
    else
      echo("Low on funds, removing #{skill} from training")
      @settings.crossing_training.delete(skill)
      false
    end
  end

  def sew(chapter, unique_name, item)
    check_yarn

    walk_to(@training_room)
    check_listening
    check_teaching

    wait_for_script_to_complete('sew', ['trash', 'knitting', chapter, unique_name, item, 'wool'])

    bput('stow my yarn', 'You put', 'Stow what')
  end

  def shape(chapter, unique_name, item)
    check_wood

    find_shaping_room(@hometown, @training_room)
    check_listening
    check_teaching

    wait_for_script_to_complete('shape', ['trash', chapter, unique_name, 'maple', item])

    bput('get my lumber', 'You get some', 'You pick up')
    dispose_trash('lumber')
  end

  def smith(full_name)
    wait_for_script_to_complete('smith', ['bronze', full_name, 'buy'])
    dispose_trash(right_hand)
    dispose_trash(left_hand)
  end

  def buy_wood
    crafting_data = get_data('crafting')
    return unless money_for_training?(1000, 'Engineering')
    order_item(crafting_data['shaping'][@hometown]['stock-room'], 10)
    bput('stow my lumber', 'You put your', 'Stow what')
  end

  def buy_yarn(skipcoin = false)
    crafting_data = get_data('crafting')
    ensure_copper_on_hand(3000, @settings) unless skipcoin
    order_item(crafting_data['tailoring'][@hometown]['stock-room'], 13)
    bput('combine my yarn', 'You combine', 'You must be holding both')
    count = bput('count my yarn', 'You count out \d+ yards').scan(/\d+/).first.to_i
    buy_yarn(true) if count < @yarn_quantity
    stow_hands
  end

  def check_yarn
    case DRC.bput('get my yarn', 'You get', 'You are already', 'What were you')
    when 'What were you'
      buy_yarn
    when 'You get', 'You are already'
      count = bput('count my yarn', 'You count out \d+ yards').scan(/\d+/).first.to_i
      buy_yarn if count < @yarn_quantity
    end
    stow_hands
  end

  def check_wood
    case bput('get my maple lumber', 'You get', 'You are already', 'What were you')
    when 'What were you'
      buy_wood
    when 'You get', 'You are already'
      count = bput('count my lumber', 'You count out \d+ pieces of lumber remaining').scan(/\d+/).first.to_i
      buy_wood if count < 5
    end
    stow_hands
  end

  def check_teaching
    return unless @settings.classes_to_teach
    return if @settings.classes_to_teach.empty?
    return if @last_teacher

    if @class_timer.nil? || Time.now - @class_timer > 10 * 60
      @settings.classes_to_teach.rotate!
      bput('stop teach', 'You stop', 'you aren\'t teaching')
      pause
      @class_timer = Time.now
    end

    to_teach = @settings.classes_to_teach.first
    DRRoom.pcs.each { |character| bput("teach #{to_teach} to #{character}", 'You begin to', 'is already listening to you', 'is listening to someone else', 'I could not find who you were referring to', 'You have already offered', 'That person is too busy teaching', 'You are already teaching', 'You cannot teach two different classes at the same time', 'is not paying attention to you', 'You cannot listen to a teacher and teach', 'already trying to teach you something') }
  end

  def check_listening
    return unless @settings.listen
    return if listen?(@last_teacher, @settings.listen_observe)
    return if DRRoom.pcs.empty?
    return unless @listen_timer.nil? || Time.now - @listen_timer > 5 * 60
    return unless @class_timer.nil?

    classes = assess_teach
    @last_teacher = classes
                    .reject { |t, s| t.nil? || s.nil? }
                    .sort_by { |_t, s| [DRSkill.getxp(s), DRSkill.getrank(s)] }
                    .find { |t, _s| listen?(t, @settings.listen_observe) }
                    .first

    @listen_timer = @last_teacher ? nil : Time.now
  end
end

Craft.new
