=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mech-lore
=end

custom_require.call(%w[common common-arcana common-crafting common-items drinfomon events equipmanager])

class MechLore
  include DRC
  include DRCC
  include DRCI

  def initialize
    @settings = get_settings
    @equipment_manager = EquipmentManager.new(@settings)

    @equipment_manager.wear_equipment_set?('standard')
    @equipment_manager.empty_hands

    # Bead carving settings
    @belt = @settings.engineering_belt
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @primer_type = @settings.mech_lore_bead_shape || 'raven'
    @block_type = @settings.mech_lore_block_type || 'crystal'
    @do_carving = @settings.mech_lore_do_bead_carving
    pause 1
    if @do_carving
      carve_bead
      braid
    else
      braid
    end
  end

  def carve_bead
    study_primer
    get_crafting_item('shaper', @bag, @bag_items, @belt)
    until DRSkill.getxp('Mechanical Lore') > 33
      break if bput("get my #{@block_type} block", 'You get', 'What were you', 'You are already holding that') == 'What were you'
      shape_bead
    end
    stow_crafting_item('shaper', @bag, @belt)
  end

  def shape_bead
    10.times do
      case bput("shape my block to #{@primer_type}", 'You shape', 'Your spirit soars with pride', 'You focus skillfully', 'You masterfully begin shaping', 'Trying your best, you masterfully run the shaper', 'With heavy strokes, you masterfully scrape', 'You smile with satisfaction as you continue to masterfully buff', 'Pursing your lips in concentration,', '^Roundtime', 'You need to hold', 'your hand slips clumsily at a critical moment, damaging the block', 'The \w+ block suddenly cracks', 'You are already holding that')
      when 'You need to hold'
        dispose_trash('bead')
        break
      when /The \w+ block suddenly cracks/
        break
      end
      if left_hand.match('bead') || right_hand.match('bead')
        dispose_trash('bead')
        break
      end
    end
  end

  def study_primer
    # Primer has a limited number of reads and gets destroyed
    return if bput("get my #{@primer_type} primer", '^You get', '^What were you referring to') == 'What were you referring to'
    bput('close my primer', '^You close', '^The primer is already closed.')
    bput('open my primer', '^You open', '^The primer is already open.')
    5.times do
      bput('study my primer', '^You have already studied this page.', '^You studiously begin', 'You study the sky')
      bput('turn my primer', '^You flip', 'Turn what?')
    end
    bput('stow my primer', '^You put')
  end

  def braid
    fput "remove #{@settings.hand_armor}"
    fput "stow #{@settings.hand_armor}"
    pause 1
    release_invisibility
    if @settings.braid_item
      braid_to_fail(@settings.braid_item)
    else
      braid_to_fail(DRSkill.getrank('Outdoorsmanship') < 110 ? 'grass' : 'vine')
    end
    @equipment_manager.empty_hands
    fput "get my #{@settings.hand_armor}"
    fput "wear my #{@settings.hand_armor}"
  end

  def braid_to_fail(item)
    return if left_hand || right_hand
    return unless forage?(item)

    loop do
      waitrt?
      case bput("braid my #{item}", 'You need to have more', 'Roundtime', 'You need both hands to do that', 'You can\'t braid the .* into your braided', 'is already as long as you can make it', 'You are in no condition')
      when 'Roundtime'
        rt = reget(10, 'Roundtime').last.scan(/\d+/).first.to_i
        break if rt >= 8 || DRSkill.getxp('Mechanical Lore') >= 30
      when 'is already as long as you can make it'
        waitrt?
        break
      when 'You need both hands to do that', /into your braided/
        waitrt?
        empty_trash
        return
      when 'You are in no condition'
        dispose_trash(item)
        wait_for_script_to_complete('safe-room')
        return
      else
        break unless forage?(item)
      end
    end
    pause 1
    waitrt?
    bput("pull my #{item}", 'You tug and pull')
    pause 1
    waitrt?
    empty_trash
  end

  # TODO: Share code with crossing-training
  def empty_trash
    trash_nouns = get_data('items').trash_nouns

    if trash_nouns.any? { |noun| /\b#{noun}/i =~ GameObj.right_hand.noun } && !@equipment_manager.is_listed_item?(right_hand)
      dispose_trash(right_hand)
    end

    if trash_nouns.any? { |noun| /\b#{noun}/i =~ GameObj.left_hand.noun } && !@equipment_manager.is_listed_item?(left_hand)
      dispose_trash(left_hand)
    end
  end
end

MechLore.new
