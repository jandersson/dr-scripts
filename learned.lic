=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#learned
=end

custom_require.call(%w[drinfomon])

def format_skill_data(skill, time)
  gain = DRSkill.gained_exp(skill.name)
  format("%s %s (%0.2f\/hr\, %0.2f\/day)", skill.name.center(18), gain.to_s.center(6), gain / time, gain / time * 24)
end

learning_time = ((Time.now - DRSkill.start_time) / 60.0 / 60)
columns = get_settings.learned_column_count

DRSkill.list.select { |item| item.current - item.baseline > 0 }.sort_by { |item| item.current - item.baseline }.reverse.each_slice(columns) do |skills|
  output = skills.map { |skill| format_skill_data(skill, learning_time) }.join
  respond(output)
end

total = DRSkill.list.select { |item| item.current - item.baseline > 0 }.map { |skill| DRSkill.gained_exp(skill.name) }.inject(&:+).round(2)
tdps = DRSkill.list.select { |item| item.current - item.baseline > 0 }.map { |skill| (DRSkill.gained_exp(skill.name) * DRSkill.getrank(skill.name)) / 200 }.inject(&:+).round(2)

per_hour = total / learning_time.round(2)
per_day  = per_hour * 24

daily_tdps = tdps / learning_time * 24

respond("   TOTAL RANKS: #{total}  HOURLY: #{per_hour.round(2)}  DAILY: #{per_day.round(2)}")
respond("   TOTAL TDPS: #{tdps}  DAILY: #{daily_tdps.round(2)}")
respond("   Learning For: #{learning_time.round(1)} hours")
