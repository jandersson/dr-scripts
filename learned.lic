=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#learned
=end

custom_require.call(%w[drinfomon])

class LearnedData
  def initialize
    @skills_to_show = []

    setup
    display_data
  end

  def setup
    arg_definitions = [
      [{ name: 'combats', regex: /(combat|comb)/, description: 'Show exp gained in combat skills.' }],
      [{ name: 'survival', regex: /(survival|surv)/, description: 'Show exp gained in survival skills.' }],
      [{ name: 'magic', regex: /magic/, description: 'Show exp gained in magic skills.' }],
      [{ name: 'armor', regex: /armor/, description: 'Show exp gained in armor skills.' }],
      [{ name: 'weapons', regex: /(weapons|weap)/, description: 'Show exp gained in weapon skills.' }],
      [{ name: 'lore', regex: /lore/, description: 'Show exp gained in lore skills.' }],
      [{ name: 'guild', regex: /guild/, description: 'Show exp gained in your guild skill.' }],
      [{ name: 'reset', regex: /reset/, description: 'Reset learned experience' }],
      []
    ]

    args = parse_args(arg_definitions)

    survival_skills = ['Evasion', 'Athletics', 'Perception', 'Stealth', 'Locksmithing', 'Thievery', 'First Aid', 'Outdoorsmanship', 'Skinning']
    lore_skills = ['Alchemy', 'Appraisal', 'Enchanting', 'Forging', 'Mechanical Lore', 'Performance', 'Scholarship', 'Tactics', 'Outfitting', 'Engineering']
    armor_skills = ['Shield Usage', 'Chain Armor', 'Plate Armor', 'Light Armor', 'Brigandine', 'Defending']
    weapon_skills = ['Parry Ability', 'Small Edged', 'Large Edged', 'Twohanded Edged', 'Small Blunt', 'Large Blunt', 'Twohanded Blunt', 'Slings', 'Bow', 'Crossbow', 'Staves', 'Polearms', 'Light Thrown', 'Heavy Thrown', 'Brawling', 'Offhand Weapon', 'Melee Mastery', 'Missile Mastery']
    magic_skills = ['Arcane Magic', 'Holy Magic', 'Life Magic', 'Elemental Magic', 'Lunar Magic', 'Attunement', 'Arcana', 'Targeted Magic', 'Inner Fire', 'Inner Magic', 'Augmentation', 'Debilitation', 'Utility', 'Warding', 'Sorcery']
    guild_skills = ['Empathy', 'Astrology', 'Expertise', 'Scouting', 'Backstab', 'Summoning', 'Bardic Lore', 'Conviction', 'Theurgy', 'Thanatology', 'Trading']

    DRSkill.reset if args.reset

    if args.survival
      @skills_to_show.concat(survival_skills)
    elsif args.combats
      @skills_to_show.concat(armor_skills)
                     .concat(weapon_skills)
                     .push('Targeted Magic')
                     .push('Debilitation')
                     .push('Evasion')
                     .push('Tactics')
    elsif args.magic
      @skills_to_show.concat(magic_skills)
    elsif args.armor
      @skills_to_show.concat(armor_skills)
    elsif args.weapons
      @skills_to_show.concat(weapon_skills)
    elsif args.lore
      @skills_to_show.concat(lore_skills)
    elsif args.guild
      @skills_to_show.concat(guild_skills)
    else
      @skills_to_show.concat(survival_skills)
                     .concat(lore_skills)
                     .concat(armor_skills)
                     .concat(weapon_skills)
                     .concat(magic_skills)
                     .concat(guild_skills)
    end
  end

  pause

  def format_skill_data(skill, time)
    gain = DRSkill.gained_exp(skill.name)
    format("%s %s (%0.2f\/hr\, %0.2f\/day)", skill.name.center(18), gain.to_s.center(6), gain / time, gain / time * 24)
  end

  def display_data
    learning_time = ((Time.now - DRSkill.start_time) / 60.0 / 60)
    columns = get_settings.learned_column_count

    DRSkill.list
           .select { |item| @skills_to_show.include?(item.name) }
           .select { |item| item.current - item.baseline > 0 }
           .sort_by { |item| item.current - item.baseline }
           .reverse.each_slice(columns) do |skills|
      output = skills.map { |skill| format_skill_data(skill, learning_time) }.join
      respond(output)
    end

    total = DRSkill.list
                   .select { |item| @skills_to_show.include?(item.name) }
                   .select { |item| item.current - item.baseline > 0 }
                   .map { |skill| DRSkill.gained_exp(skill.name) }
                   .inject(&:+)
                   .round(2)
    tdps = DRSkill.list
                  .select { |item| @skills_to_show.include?(item.name) }
                  .select { |item| item.current - item.baseline > 0 }
                  .map { |skill| (DRSkill.gained_exp(skill.name) * DRSkill.getrank(skill.name)) / 200 }
                  .inject(&:+)
                  .round(2)

    per_hour = total / learning_time.round(2)
    per_day  = per_hour * 24

    hourly_tdps = tdps / learning_time
    daily_tdps = tdps / learning_time * 24

    respond("   TOTAL RANKS: #{total}  HOURLY: #{per_hour.round(2)}  DAILY: #{per_day.round(2)}")
    respond("   TOTAL TDPS: #{tdps}  HOURLY: #{hourly_tdps.round(2)}  DAILY: #{daily_tdps.round(2)}")
    respond("   Learning For: #{learning_time.round(1)} hours")
  end
end

LearnedData.new
