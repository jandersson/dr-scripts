=begin
  Documentation: 
=end
custom_require.call(%w[common common-travel])
class Nexus
  include DRC
  include DRCT
  
  def initialize
    UserVars.nexus ||= {}
    arg_definitions = [
      [
        { name: 'offering', options: %w[concentration health mana spirit fatigue], description: 'What will you sacrifice to power the nexus?'},
        { name: 'room', display: 'Room id #', regex: /\d+/, description: 'What is the room id of the room you are making a sacrifice in?' }
      ],
      [
        { name: 'list', regex: /list/i, description: 'List all the known nexus rooms' }
      ]

    ]
    args = parse_args(arg_definitions)
    if args.list
      print_list
    else
      sacrifice?(args.room, args.offering)
    end
  end

  def sacrifice?(room, offering)
    walk_to room
    case bput("sacrifice nexus #{offering}", 'Before you can register it happening, a part of you is ripped violently away', 'Noble as that sacrifice would be', "You've recently sacrificed to empower a nexus", /^\[You don't have access to creating empowered nexus points/, "^But you have no attunement to sacrifice")
    when 'Before you can register it happening, a part of you is ripped violently away'
      UserVars.nexus['last_sacrifice_time'] = Time.now
      true
    when 'Noble as that sacrifice would be'
      echo "#{room} is not a nexus!"
      false 
    when "You've recently sacrificed to empower a nexus", "You don't have access to creating empowered nexus points", "But you have no attunement to sacrifice"
      false
    end
  end

  def print_list
    respond('-' * 70)
    respond(' - Nexus Room Title'.ljust(48) + ' - Nexus Room ID'.rjust(5))
    respond('-' * 70)
    Map.list.find_all{ |room| room.tags.include?('nexus') }
            .each{ |room| respond " - #{room.title.first.sub(/^\[/, '').sub(/\]$/, '').ljust(45)} - #{room.id.to_s.rjust(5)}\n" }
  end
end
Nexus.new
