=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#shape
=end

custom_require.call(%w[common common-crafting common-items])

class Shape
  include DRC
  include DRCC
  include DRCI

  def initialize
    settings = get_settings
    @bag = settings.crafting_container
    @bag_items = settings.crafting_items_in_container
    @belt = settings.engineering_belt

    arg_definitions = [
      [
        { name: 'finish', options: %w[log stow trash], description: 'What to do with the finished item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-]+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'material', regex: /\w+/i, variable: true, description: 'Type of material.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'continue', regex: /continue/i, variable: true },
        { name: 'noun', regex: /\w+/i, variable: true }
      ]
    ]

    args = parse_args(arg_definitions)

    @finish = args.finish
    @chapter = args.chapter
    @recipe_name = args.recipe_name
    @material = args.material
    @noun = args.noun

    Flags.add('shaping-assembly', 'You need another bone, wood or horn (backing) material', 'another finished bow (string)', 'another finished (long|short) wooden (pole)', 'another .* leather (strip)')
    if args.continue
      shape("analyze my #{@noun}")
    else
      shape_item
    end
  end

  def get_item(name)
    get_crafting_item(name, @bag, @belt, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def shape_item
    get_item('shaping book')
    turn_to("page #{find_recipe(@chapter, @recipe_name)}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    get_item('drawknife')
    get_item("#{@material} lumber")
    shape('scrape my lumber with my drawknife')
  end

  def assemble_part
    return unless Flags['shaping-assembly']

    tool = right_hand
    stow_item(tool)
    part = Flags['shaping-assembly'][1..-1].join('.')
    part = 'backer' if part == 'backing'
    Flags.reset('shaping-assembly')
    get_item(part)
    bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
    if ['long.pole', 'short.pole'].include?(part)
      3.times do
        get_item(part)
        bput("assemble my #{@noun} with my #{part}", 'affix it securely in place', 'loop both ends', 'loop the string', 'carefully mark where it will attach when you continue crafting', 'add several marks indicating optimal locations')
      end
    end
    get_item(tool)
  end

  def shape(command)
    waitrt?
    assemble_part
    case bput(command,
              'a wood shaper is needed', 'ready for shaping with a wood shaper',
              'carved with a carving knife', 'further carving with a knife', 'continued knife carving',
              'rubbed out with a rasp', 'A cluster of small knots',
              'Applying the final touches',
              'That tool does not seem suitable for that task.',
              'while it is inside of something',
              'Glue should now be applied', 'glue to fasten it',
              'ready to be clamped', 'pushed with clamps', 'pushing it with clamps',
              'Some wood stain', 'application of stain',
              'You fumble around but',
              'You must be holding the shaper to do that',
              'You cannot figure out how to do that',
              'ASSEMBLE Ingredient1')
    when 'a wood shaper is needed', 'ready for shaping with a wood shaper', 'You must be holding the shaper to do that'
      waitrt?
      stow_item(right_hand)
      get_item('shaper')
      command = "shape my #{@noun} with my shaper"
    when 'carved with a carving knife', 'further carving with a knife', 'continued knife carving'
      waitrt?
      stow_item(right_hand)
      get_item('carving knife')
      command = "carve my #{@noun} with my knife"
    when 'rubbed out with a rasp', 'A cluster of small knots'
      waitrt?
      stow_item(right_hand)
      get_item('rasp')
      command = "rub my #{@noun} with my rasp"
    when 'ready to be clamped', 'pushed with clamps', 'pushing it with clamps'
      waitrt?
      stow_item(right_hand)
      get_item('clamp')
      command = "push my #{@noun} with my clamp"
    when 'Glue should now be applied', 'glue to fasten it'
      waitrt?
      stow_item(right_hand)
      get_item('glue')
      command = "apply glue to my #{@noun}"
    when 'Some wood stain', 'application of stain'
      waitrt?
      stow_item(right_hand)
      get_item('stain')
      command = "apply stain to my #{@noun}"
    when 'Applying the final touches'
      stow_item(right_hand)
      finish
    when 'while it is inside of something', 'You fumble around but', 'You cannot figure out how to do that'
      echo '*** ERROR TRYING TO CRAFT, EXITING ***'
      stow_item(right_hand)
      exit
    when 'That tool does not seem suitable for that task.'
      shape("analyze my #{@noun}")
    end
    shape(command)
  end

  def finish
    case @finish
    when /log/
      logbook_item('engineering', @noun, @bag)
    when /stow/
      stow_item(@noun)
    when /trash/
      dispose_trash(@noun)
    end
    exit
  end
end

Shape.new
