# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common
=end

$ORDINALS = %w[first second third fourth fifth sixth seventh eighth ninth tenth eleventh]

$CURRENCIES = %w[Kronars Lirums Dokoras]

$ENC_MAP = {
  'None' => 0,
  'Light Burden' => 1,
  'Somewhat Burdened' => 2,
  'Burdened' => 3,
  'Heavy Burden' => 4,
  'Very Heavy Burden' => 5,
  'Overburdened' => 6,
  'Very Overburdened' => 7,
  'Extremely Overburdened' => 8,
  'Tottering Under Burden' => 9,
  'Are you even able to move?' => 10,
  'It\'s amazing you aren\'t squashed!' => 11
}

$NUM_MAP = {
  'zero' => 0,
  'one' => 1,
  'two' => 2,
  'three' => 3,
  'four' => 4,
  'five' => 5,
  'six' => 6,
  'seven' => 7,
  'eight' => 8,
  'nine' => 9,
  'ten' => 10,
  'eleven' => 11,
  'twelve' => 12,
  'thirteen' => 13,
  'fourteen' => 14,
  'fifteen' => 15,
  'sixteen' => 16,
  'seventeen' => 17,
  'eighteen' => 18,
  'nineteen' => 19,
  'twenty' => 20,
  'thirty' => 30,
  'forty' => 40,
  'fifty' => 50,
  'sixty' => 60,
  'seventy' => 70,
  'eighty' => 80,
  'ninety' => 90
}

custom_require.call(%w[spellmonitor drinfomon])

module DRC
  module_function

  def bput(message, *matches)
    waitrt?
    timer = Time.now
    log = []
    matches.flatten!
    matches.map! { |item| item.is_a?(Regexp) ? item : /#{item}/i }
    clear
    put message
    while Time.now - timer < 15
      response = get?

      if response.nil?
        pause 0.1
        next
      end

      log += [response]

      case response
      when /(?:\.\.\.wait |Wait |\.\.\. wait )([0-9]+)/
        pause Regexp.last_match(1).to_i
        put message
        timer = Time.now
        next
      when /Sorry, you may only type ahead/
        pause 1
        put message
        timer = Time.now
        next
      when /^You are a bit too busy performing to do that/, /You should stop playing before you do that/
        put 'stop play'
        put message
        timer = Time.now
        next
      when /would give away your hiding place/
        release_invisibility
        put 'unhide'
        put message
        timer = Time.now
        next
      when /^You are still stunned/, /^You can't do that while entangled in a web/
        pause 0.5
        put message
        timer = Time.now
        next
      end

      matches.each do |match|
        if (result = response.match(match))
          return result.to_a.first
        end
      end
    end
    echo '*** No match was found after 15 seconds, dumping info'
    echo "messages seen length: #{log.length}"
    log.reverse.each { |logged_response| echo "message: #{logged_response}" }
    echo "checked against #{matches}"
    echo "for command #{message}"
    ''
  end

  def wait_for_script_to_complete(name, args = [], flags = {})
    verify_script(name)
    before = Script.running.find_all { |s| s.name =~ /#{name}/i }.length
    success = start_script(name, args.map { |arg| arg =~ /\s/ ? "\"#{arg}\"" : arg }, flags)
    if success
      pause 2
      pause 1 while before < Script.running.find_all { |s| s.name =~ /#{name}/i }.length
    end
    success
  end

  def forage?(item)
    snapshot = "#{right_hand}#{left_hand}"
    while snapshot == "#{right_hand}#{left_hand}"
      case bput("forage #{item}", 'Roundtime', 'The room is too cluttered to find anything here', 'You really need to have at least one hand free to forage properly', 'You survey the area and realize that any foraging efforts would be futile')
      when 'The room is too cluttered to find anything here'
        return false unless kick_pile?
      when 'You survey the area and realize that any foraging efforts would be futile'
        return false
      when 'You really need to have at least one hand free to forage properly'
        echo 'WARNING: hands not emptied properly. Stowing...'
        fput('stow right')
      end
      waitrt?
    end
    true
  end

  def collect(item)
    case bput("collect #{item}", 'You manage to collect a pile', 'The room is too cluttered', 'believe you would probably have better luck trying to find a dragon', 'if you had a bit more luck.', 'You cannot collect anything', 'You forage around but are unable to find anything', 'You wander around and poke your fingers', 'You survey the area and realize that any collecting efforts would be futile', 'You are sure you knew', 'You begin to forage around,')
    when 'The room is too cluttered'
      return unless kick_pile?
      collect(item)
    end
    waitrt?
  end

  def kick_pile?(item = 'pile')
    fix_standing
    bput("kick #{item}", 'I could not find', 'take a step back and run up to', 'Now what did the .* ever do to you') == 'take a step back and run up to'
  end

  def rummage(parameter, container)
    result = DRC.bput("rummage /#{parameter} my #{container}", 'but there is nothing in there like that\.', 'looking for .* and see .*', 'While it\'s closed', 'I don\'t know what you are referring to', 'You feel about')

    case result
    when 'You feel about'
      release_invisibility
      return rummage(parameter, container)
    when 'but there is nothing in there like that.', 'While it\'s closed', 'I don\'t know what you are referring to'
      return []
    end

    text = result.match(/looking for .* and see (.*)\.$/).to_a[1]

    list_to_nouns(text)
  end

  def get_boxes(container)
    rummage('B', container)
  end

  def count_boxes(settings)
    current_box_count = get_boxes(settings.picking_box_source).size
    if settings.picking_pet_box_source != settings.picking_box_source
      current_box_count += get_boxes(settings.picking_pet_box_source).size
    end
    current_box_count
  end

  def get_skins(container)
    rummage('S', container)
  end

  def get_gems(container)
    rummage('G', container)
  end

  def get_materials(container)
    rummage('M', container)
  end

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array ["an arrow", "silver coins", "a deobar strongbox"]
  # is this ever useful compared to the list_to_nouns?
  def list_to_array(list)
    list.strip.split(/,|\sand\s/)
  end

  # Take a game formatted list "an arrow, silver coins and a deobar strongbox"
  # And return an array of nouns ["arrow", "coins", "strongbox"]
  def list_to_nouns(list)
    list_to_array(list)
      .map { |long_name| get_noun(long_name) }
      .compact
      .reject { |noun| noun == '' }
  end

  def get_noun(long_name)
    long_name.strip.sub(/ with .*| labeled .+/, '').scan(/[a-z\-]+$/i).first
  end

  # Items class. Name is the noun of the object. Leather/metal boolean. Is the item worn (defaults to true). Does it hinder lockpicking? (false)
  # Item.new(name:'gloves', leather:true, worn:true, hinders_locks:true, adjective:'ring', bound:true)
  class Item
    attr_accessor :name, :leather, :worn, :hinders_lockpicking, :container, :swappable, :tie_to, :adjective, :bound, :wield, :transforms_to, :transform_verb, :transform_text, :lodges

    def initialize(name: nil, leather: nil, worn: false, hinders_locks: nil, container: nil, swappable: false, tie_to: nil, adjective: nil, bound: false, wield: false, transforms_to: nil, transform_text: nil, transform_verb: nil, lodges: true)
      @name = name
      @leather = leather
      @worn = worn
      @hinders_lockpicking = hinders_locks
      @container = container
      @swappable = swappable
      @tie_to = tie_to
      @adjective = adjective
      @bound = bound
      @wield = wield
      @transforms_to = transforms_to
      @transform_verb = transform_verb
      @transform_text = transform_text
      @lodges = lodges.nil? ? true : lodges
    end

    def short_name
      @adjective ? "#{@adjective}.#{@name}" : @name
    end

    def short_regex
      @adjective ? /#{adjective}.*\b#{@name}/i : /\b#{@name}/i
    end
  end

  # windows only I believe.
  def beep
    echo("\a")
  end

  def fix_standing
    loop do
      break if standing?
      bput('stand', 'You stand', 'You are so unbalanced', 'As you stand', 'You are already', 'weight of all your possessions', 'You are overburdened and cannot', 'You\'re unconscious')
    end
  end

  def listen?(teacher, observe_flag = false)
    return false if teacher.nil?
    return false if teacher.empty?

    bad_classes = %w[Thievery Sorcery]
    bad_classes += ['Life Magic', 'Holy Magic', 'Lunar Magic', 'Elemental Magic', 'Arcane Magic', 'Targeted Magic', 'Arcana', 'Attunement'] if DRStats.barbarian? || DRStats.thief?
    bad_classes += ['Warding'] if DRStats.thief?
    bad_classes += ['Utility'] if DRStats.barbarian?

    observe = observe_flag ? 'observe' : ''

    case bput("listen to #{teacher} #{observe}", 'begin to listen to \w+ teach the .* skill', 'already listening', 'could not find who', 'You have no idea', 'isn\'t teaching a class', 'don\'t have the appropriate training', 'Your teacher appears to have left', 'isn\'t teaching you anymore', 'experience differs too much from your own', 'but you don\'t see any harm in listening', 'invitation if you wish to join this class', 'You can.t really learn anything when your instructor can.t see you')
    when /begin to listen to \w+ teach the (.*) skill/
      return true if bad_classes.grep(/#{Regexp.last_match(1)}/i).empty?
      bput('stop listening', 'You stop listening')
    when 'already listening'
      return true
    when 'but you don\'t see any harm in listening'
      bput('stop listening', 'You stop listening')
    when "You can't really learn anything when your instructor can't see you"
      release_invisibility
      return listen?(teacher, observe_flag)
    end

    false
  end

  def assess_teach
    case bput('assess teach', 'is teaching a class', 'No one seems to be teaching', 'You are teaching a class')
    when 'No one seems to be teaching', 'You are teaching a class'
      waitrt?
      return {}
    end
    results = reget(20, 'is teaching a class')
    waitrt?

    results.each_with_object({}) do |line, hash|
      line.match(/(.*) is teaching a class on (.*) which is still open to new students/) do |match|
        teacher = match[1]
        skill = match[2]
        # Some classes match the first format, some have additional text in the 'skill' string that needs to be filtered
        skill.match(/.* \(compared to what you already know\) (.*)/) { |m| skill = m[1] }
        hash[teacher] = skill
      end
    end
  end

  def hide?(hide_type = 'hide')
    unless hiding?
      case bput(hide_type, 'Roundtime', 'too busy performing', 'can\'t see any place to hide yourself', 'Stalk what', 'You\'re already stalking', 'Stalking is an inherently stealthy')
      when 'too busy performing'
        bput('stop play', 'You stop playing', 'In the name of')
        return hide?(hide_type)
      when "You're already stalking"
        put 'stop stalk'
        return hide?(hide_type)
      end
      pause
      waitrt?
    end
    hiding?
  end

  def fix_dr_bullshit(string)
    return string if string.split.length <= 2
    string =~ /(\w+) .* (\w+)/
    "#{Regexp.last_match(1)} #{Regexp.last_match(2)}"
  end

  def left_hand
    GameObj.left_hand.name == 'Empty' ? nil : fix_dr_bullshit(GameObj.left_hand.name)
  end

  def right_hand
    GameObj.right_hand.name == 'Empty' ? nil : fix_dr_bullshit(GameObj.right_hand.name)
  end

  def release_invisibility
    echo '1'
    get_data('spells')
      .spell_data
      .select { |_name, properties| properties['invisibility'] }
      .select { |name, _properties| DRSpells.active_spells.keys.include?(name) }
      .map { |_name, properties| properties['abbrev'] }
      .each { |abbrev| fput("release #{abbrev}") }
  end

  def check_encumbrance(refresh = true)
    bput('encumbrance', 'Encumbrance : .*') if refresh
    $ENC_MAP[DRStats.encumbrance]
  end

  def text2num(text_num)
    text_num = text_num.tr('-', ' ')
    split_words = text_num.split(' ')
    g = 0

    split_words.each do |word|
      x = $NUM_MAP.fetch(word, nil)
      if word.eql?('hundred') && (g != 0)
        g *= 100
      elsif x.nil?
        echo 'Unknown number'
        return nil
      else
        g += x
      end
    end

    g
  end
end
